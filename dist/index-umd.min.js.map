{"version":3,"file":"index-umd.min.js","sources":["../node_modules/kld-affine/lib/Point2D.js","../node_modules/kld-affine/lib/Vector2D.js","../node_modules/kld-affine/lib/Matrix2D.js","../node_modules/kld-affine/index.js","../lib/IntersectionParams.js","../node_modules/kld-polynomial/lib/Polynomial.js","../node_modules/kld-polynomial/lib/SqrtPolynomial.js","../node_modules/kld-polynomial/index.js","../lib/Intersection.js","../lib/functions/bezier.js","../lib/intersect.js","../index.js"],"sourcesContent":["/**\n *\n *   Point2D.js\n *\n *   copyright 2001-2002, 2013 Kevin Lindsey\n *\n */\n\n/**\n *  Point2D\n *\n *  @param {Number} x\n *  @param {Number} y\n *  @returns {Point2D}\n */\nfunction Point2D(x, y) {\n    Object.defineProperties(this, {\n        \"x\": {\n            value: x,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"y\": {\n            value: y,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        }\n    });\n    // this.x = x;\n    // this.y = y;\n}\n\n/**\n *  clone\n *\n *  @returns {Point2D}\n */\nPoint2D.prototype.clone = function() {\n    return new this.constructor(this.x, this.y);\n};\n\n/**\n *  add\n *\n *  @param {Point2D|Vector2D} that\n *  @returns {Point2D}\n */\nPoint2D.prototype.add = function(that) {\n    return new this.constructor(this.x+that.x, this.y+that.y);\n};\n\n/**\n *  subtract\n *\n *  @param { Vector2D | Point2D } that\n *  @returns {Point2D}\n */\nPoint2D.prototype.subtract = function(that) {\n    return new this.constructor(this.x-that.x, this.y-that.y);\n};\n\n/**\n *  multiply\n *\n *  @param {Number} scalar\n *  @returns {Point2D}\n */\nPoint2D.prototype.multiply = function(scalar) {\n    return new this.constructor(this.x*scalar, this.y*scalar);\n};\n\n/**\n *  divide\n *\n *  @param {Number} scalar\n *  @returns {Point2D}\n */\nPoint2D.prototype.divide = function(scalar) {\n    return new this.constructor(this.x/scalar, this.y/scalar);\n};\n\n/**\n *  equals\n *\n *  @param {Point2D} that\n *  @returns {Boolean}\n */\nPoint2D.prototype.equals = function(that) {\n    return ( this.x === that.x && this.y === that.y );\n};\n\n// utility methods\n\n/**\n *  lerp\n *\n *  @param { Vector2D | Point2D } that\n *  @param {Number} t\n @  @returns {Point2D}\n */\nPoint2D.prototype.lerp = function(that, t) {\n    var omt = 1.0 - t;\n\n    return new this.constructor(\n        this.x * omt + that.x * t,\n        this.y * omt + that.y * t\n    );\n};\n\n/**\n *  distanceFrom\n *\n *  @param {Point2D} that\n *  @returns {Number}\n */\nPoint2D.prototype.distanceFrom = function(that) {\n    var dx = this.x - that.x;\n    var dy = this.y - that.y;\n\n    return Math.sqrt(dx*dx + dy*dy);\n};\n\n/**\n *  min\n *\n *  @param {Point2D} that\n *  @returns {Number}\n */\nPoint2D.prototype.min = function(that) {\n    return new this.constructor(\n        Math.min( this.x, that.x ),\n        Math.min( this.y, that.y )\n    );\n};\n\n/**\n *  max\n *\n *  @param {Point2D} that\n *  @returns {Number}\n */\nPoint2D.prototype.max = function(that) {\n    return new this.constructor(\n        Math.max( this.x, that.x ),\n        Math.max( this.y, that.y )\n    );\n};\n\n/**\n *  transform\n *\n *  @param {Matrix2D}\n *  @result {Point2D}\n */\nPoint2D.prototype.transform = function(matrix) {\n    return new this.constructor(\n        matrix.a * this.x + matrix.c * this.y + matrix.e,\n        matrix.b * this.x + matrix.d * this.y + matrix.f\n    );\n};\n\n/**\n *  toString\n *\n *  @returns {String}\n */\nPoint2D.prototype.toString = function() {\n    return \"point(\" + this.x + \",\" + this.y + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Point2D;\n}\n","/**\n *\n *   Vector2D.js\n *\n *   copyright 2001-2002, 2013 Kevin Lindsey\n *\n */\n\n/**\n *  Vector2D\n *\n *  @param {Number} x\n *  @param {Number} y\n *  @returns {Vector2D}\n */\nfunction Vector2D(x, y) {\n    Object.defineProperties(this, {\n        \"x\": {\n            value: x,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"y\": {\n            value: y,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        }\n    });\n    // this.x = x;\n    // this.y = y;\n}\n\n/**\n *  fromPoints\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @returns {Vector2D}\n */\nVector2D.fromPoints = function(p1, p2) {\n    return new Vector2D(\n        p2.x - p1.x,\n        p2.y - p1.y\n    );\n};\n\n/**\n *  length\n *\n *  @returns {Number}\n */\nVector2D.prototype.length = function() {\n    return Math.sqrt(this.x*this.x + this.y*this.y);\n};\n\n/**\n *  magnitude\n *\n *  @returns {Number}\n */\nVector2D.prototype.magnitude = function() {\n    return this.x*this.x + this.y*this.y;\n};\n\n/**\n *  dot\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.dot = function(that) {\n    return this.x*that.x + this.y*that.y;\n};\n\n/**\n *  cross\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.cross = function(that) {\n    return this.x*that.y - this.y*that.x;\n};\n\n/**\n *  determinant\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.determinant = function(that) {\n    return this.x*that.y - this.y*that.x;\n};\n\n/**\n *  unit\n *\n *  @returns {Vector2D}\n */\nVector2D.prototype.unit = function() {\n    return this.divide( this.length() );\n};\n\n/**\n *  add\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.add = function(that) {\n    return new this.constructor(this.x + that.x, this.y + that.y);\n};\n\n/**\n *  subtract\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.subtract = function(that) {\n    return new this.constructor(this.x - that.x, this.y - that.y);\n};\n\n/**\n *  multiply\n *\n *  @param {Number} scalar\n *  @returns {Vector2D}\n */\nVector2D.prototype.multiply = function(scalar) {\n    return new this.constructor(this.x * scalar, this.y * scalar);\n};\n\n/**\n *  divide\n *\n *  @param {Number} scalar\n *  @returns {Vector2D}\n */\nVector2D.prototype.divide = function(scalar) {\n    return new this.constructor(this.x / scalar, this.y / scalar);\n};\n\n/**\n *  angleBetween\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.angleBetween = function(that) {\n    var cos = this.dot(that) / (this.length() * that.length());\n    cos = Math.max(-1, Math.min(cos, 1));\n    var radians = Math.acos(cos);\n\n    return (this.cross(that) < 0.0) ? -radians : radians;\n};\n\n/**\n *  Find a vector is that is perpendicular to this vector\n *\n *  @returns {Vector2D}\n */\nVector2D.prototype.perp = function() {\n    return new this.constructor(-this.y, this.x);\n};\n\n/**\n *  Find the component of the specified vector that is perpendicular to\n *  this vector\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.perpendicular = function(that) {\n    return this.subtract(this.project(that));\n};\n\n/**\n *  project\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.project = function(that) {\n    var percent = this.dot(that) / that.dot(that);\n\n    return that.multiply(percent);\n};\n\n/**\n *  transform\n *\n *  @param {Matrix2D}\n *  @returns {Vector2D}\n */\nVector2D.prototype.transform = function(matrix) {\n    return new this.constructor(\n        matrix.a * this.x + matrix.c * this.y,\n        matrix.b * this.x + matrix.d * this.y\n    );\n};\n\n/**\n *  equals\n *\n *  @param {Vector2D} that\n *  @returns {Boolean}\n */\nVector2D.prototype.equals = function(that) {\n    return (\n        this.x === that.x &&\n        this.y === that.y\n    );\n};\n\n/**\n *  toString\n *\n *  @returns {String}\n */\nVector2D.prototype.toString = function() {\n    return \"vector(\" + this.x + \",\" + this.y + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Vector2D;\n}\n","/**\n *   Matrix2D.js\n *\n *   copyright 2001-2002, 2013 Kevin Lindsey\n */\n\n/**\n *  Matrix2D\n *\n *  [a c e]\n *  [b d f]\n *  [0 0 1]\n *\n *  @param {Number} a\n *  @param {Number} b\n *  @param {Number} c\n *  @param {Number} d\n *  @param {Number} e\n *  @param {Number} f\n *  @returns {Matrix2D}\n */\nfunction Matrix2D(a, b, c, d, e, f) {\n    Object.defineProperties(this, {\n        \"a\": {\n            value: (a !== undefined) ? a : 1,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"b\": {\n            value: (b !== undefined) ? b : 0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"c\": {\n            value: (c !== undefined) ? c : 0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"d\": {\n            value: (d !== undefined) ? d : 1,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"e\": {\n            value: (e !== undefined) ? e : 0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"f\": {\n            value: (f !== undefined) ? f : 0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        }\n    });\n}\n\n/**\n *  Identity matrix\n *\n *  @returns {Matrix2D}\n */\n// TODO: consider using Object#defineProperty to make this read-only\nMatrix2D.IDENTITY = new Matrix2D(1, 0, 0, 1, 0, 0);\nMatrix2D.IDENTITY.isIdentity = function () { return true; };\n\n/**\n *  multiply\n *\n *  @pararm {Matrix2D} that\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.multiply = function (that) {\n    if (this.isIdentity()) {\n        return that;\n    }\n\n    if (that.isIdentity()) {\n        return this;\n    }\n\n    return new this.constructor(\n        this.a * that.a + this.c * that.b,\n        this.b * that.a + this.d * that.b,\n        this.a * that.c + this.c * that.d,\n        this.b * that.c + this.d * that.d,\n        this.a * that.e + this.c * that.f + this.e,\n        this.b * that.e + this.d * that.f + this.f\n    );\n};\n\n/**\n *  inverse\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.inverse = function () {\n    if (this.isIdentity()) {\n        return this;\n    }\n\n    var det1 = this.a * this.d - this.b * this.c;\n\n    if ( det1 === 0.0 ) {\n        throw(\"Matrix is not invertible\");\n    }\n\n    var idet = 1.0 / det1;\n    var det2 = this.f * this.c - this.e * this.d;\n    var det3 = this.e * this.b - this.f * this.a;\n\n    return new this.constructor(\n        this.d * idet,\n       -this.b * idet,\n       -this.c * idet,\n        this.a * idet,\n          det2 * idet,\n          det3 * idet\n    );\n};\n\n/**\n *  translate\n *\n *  @param {Number} tx\n *  @param {Number} ty\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.translate = function(tx, ty) {\n    return new this.constructor(\n        this.a,\n        this.b,\n        this.c,\n        this.d,\n        this.a * tx + this.c * ty + this.e,\n        this.b * tx + this.d * ty + this.f\n    );\n};\n\n/**\n *  scale\n *\n *  @param {Number} scale\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scale = function(scale) {\n    return new this.constructor(\n        this.a * scale,\n        this.b * scale,\n        this.c * scale,\n        this.d * scale,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  scaleAt\n *\n *  @param {Number} scale\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scaleAt = function(scale, center) {\n    var dx = center.x - scale * center.x;\n    var dy = center.y - scale * center.y;\n\n    return new this.constructor(\n        this.a * scale,\n        this.b * scale,\n        this.c * scale,\n        this.d * scale,\n        this.a * dx + this.c * dy + this.e,\n        this.b * dx + this.d * dy + this.f\n    );\n};\n\n/**\n *  scaleNonUniform\n *\n *  @param {Number} scaleX\n *  @param {Number} scaleY\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scaleNonUniform = function(scaleX, scaleY) {\n    return new this.constructor(\n        this.a * scaleX,\n        this.b * scaleX,\n        this.c * scaleY,\n        this.d * scaleY,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  scaleNonUniformAt\n *\n *  @param {Number} scaleX\n *  @param {Number} scaleY\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scaleNonUniformAt = function(scaleX, scaleY, center) {\n    var dx = center.x - scaleX * center.x;\n    var dy = center.y - scaleY * center.y;\n\n    return new this.constructor(\n        this.a * scaleX,\n        this.b * scaleX,\n        this.c * scaleY,\n        this.d * scaleY,\n        this.a * dx + this.c * dy + this.e,\n        this.b * dx + this.d * dy + this.f\n    );\n};\n\n/**\n *  rotate\n *\n *  @param {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.rotate = function(radians) {\n    var c = Math.cos(radians);\n    var s = Math.sin(radians);\n\n    return new this.constructor(\n        this.a *  c + this.c * s,\n        this.b *  c + this.d * s,\n        this.a * -s + this.c * c,\n        this.b * -s + this.d * c,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  rotateAt\n *\n *  @param {Number} radians\n *  @param {Point2D} center\n *  @result {Matrix2D}\n */\nMatrix2D.prototype.rotateAt = function(radians, center) {\n    var c = Math.cos(radians);\n    var s = Math.sin(radians);\n    var t1 = -center.x + center.x * c - center.y * s;\n    var t2 = -center.y + center.y * c + center.x * s;\n\n    return new this.constructor(\n        this.a *  c + this.c * s,\n        this.b *  c + this.d * s,\n        this.a * -s + this.c * c,\n        this.b * -s + this.d * c,\n        this.a * t1 + this.c * t2 + this.e,\n        this.b * t1 + this.d * t2 + this.f\n    );\n};\n\n/**\n *  rotateFromVector\n *\n *  @param {Vector2D}\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.rotateFromVector = function(vector) {\n    var unit = vector.unit();\n    var c = unit.x; // cos\n    var s = unit.y; // sin\n\n    return new this.constructor(\n        this.a *  c + this.c * s,\n        this.b *  c + this.d * s,\n        this.a * -s + this.c * c,\n        this.b * -s + this.d * c,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  flipX\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.flipX = function() {\n    return new this.constructor(\n        -this.a,\n        -this.b,\n         this.c,\n         this.d,\n         this.e,\n         this.f\n    );\n};\n\n/**\n *  flipY\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.flipY = function() {\n    return new this.constructor(\n         this.a,\n         this.b,\n        -this.c,\n        -this.d,\n         this.e,\n         this.f\n    );\n};\n\n/**\n *  skewX\n *\n *  @pararm {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.skewX = function(radians) {\n    var t = Math.tan(radians);\n\n    return new this.constructor(\n        this.a,\n        this.b,\n        this.a * t + this.c,\n        this.b * t + this.d,\n        this.e,\n        this.f\n    );\n};\n\n// TODO: skewXAt\n\n/**\n *  skewY\n *\n *  @pararm {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.skewY = function(radians) {\n    var t = Math.tan(radians);\n\n    return new this.constructor(\n        this.a + this.c * t,\n        this.b + this.d * t,\n        this.c,\n        this.d,\n        this.e,\n        this.f\n    );\n};\n\n// TODO: skewYAt\n\n/**\n *  isIdentity\n *\n *  @returns {Boolean}\n */\nMatrix2D.prototype.isIdentity = function() {\n    return (\n        this.a === 1.0 &&\n        this.b === 0.0 &&\n        this.c === 0.0 &&\n        this.d === 1.0 &&\n        this.e === 0.0 &&\n        this.f === 0.0\n    );\n};\n\n/**\n *  isInvertible\n *\n *  @returns {Boolean}\n */\nMatrix2D.prototype.isInvertible = function() {\n    return this.a * this.d - this.b * this.c !== 0.0;\n};\n\n/**\n *  getScale\n *\n *  @returns {{ scaleX: Number, scaleY: Number }}\n */\nMatrix2D.prototype.getScale = function() {\n    return {\n        scaleX: Math.sqrt(this.a * this.a + this.c * this.c),\n        scaleY: Math.sqrt(this.b * this.b + this.d * this.d)\n    };\n};\n\n/**\n *  getDecomposition\n *\n *  Calculates matrix Singular Value Decomposition\n *\n *  The resulting matrices, translation, rotation, scale, and rotation0, return\n *  this matrix when they are muliplied together in the listed order\n *\n *  @see Jim Blinn's article {@link http://dx.doi.org/10.1109/38.486688}\n *  @see {@link http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation}\n *\n *  @returns {{ translation: Matrix2D, rotation: Matrix2D, scale: Matrix2D, rotation0: Matrix2D }}\n */\nMatrix2D.prototype.getDecomposition = function () {\n    var E      = (this.a + this.d) * 0.5;\n    var F      = (this.a - this.d) * 0.5;\n    var G      = (this.b + this.c) * 0.5;\n    var H      = (this.b - this.c) * 0.5;\n\n    var Q      = Math.sqrt(E * E + H * H);\n    var R      = Math.sqrt(F * F + G * G);\n    var scaleX = Q + R;\n    var scaleY = Q - R;\n\n    var a1     = Math.atan2(G, F);\n    var a2     = Math.atan2(H, E);\n    var theta  = (a2 - a1) * 0.5;\n    var phi    = (a2 + a1) * 0.5;\n\n    // TODO: Add static methods to generate translation, rotation, etc.\n    // matrices directly\n\n    return {\n        translation: new this.constructor(1, 0, 0, 1, this.e, this.f),\n        rotation:    this.constructor.IDENTITY.rotate(phi),\n        scale:       new this.constructor(scaleX, 0, 0, scaleY, 0, 0),\n        rotation0:   this.constructor.IDENTITY.rotate(theta)\n    };\n};\n\n/**\n *  equals\n *\n *  @param {Matrix2D} that\n *  @returns {Boolean}\n */\nMatrix2D.prototype.equals = function(that) {\n    return (\n        this.a === that.a &&\n        this.b === that.b &&\n        this.c === that.c &&\n        this.d === that.d &&\n        this.e === that.e &&\n        this.f === that.f\n    );\n};\n\n/**\n *  toString\n *\n *  @returns {String}\n */\nMatrix2D.prototype.toString = function() {\n    return \"matrix(\" + [this.a, this.b, this.c, this.d, this.e, this.f].join(\",\") + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Matrix2D;\n}\n","// expose classes\n\nexports.Point2D = require('./lib/Point2D');\nexports.Vector2D = require('./lib/Vector2D');\nexports.Matrix2D = require('./lib/Matrix2D');\n","import {Point2D} from 'kld-affine';\n\n\n/**\n    getArcParameters\n\n    @param {Point2D} startPoint\n    @param {Point2D} endPoint\n    @param {Number} rx\n    @param {Number} ry\n    @param {Number} angle - in degrees\n    @param {Boolean} arcFlag\n    @param {Boolean} sweepFlag\n    @returns {{ center: Point2D, rx: Number, ry: Number, theta1: Number, deltaTheta: Number }}\n*/\nfunction getArcParameters(startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {\n    function radian(ux, uy, vx, vy) {\n        var dot = ux * vx + uy * vy;\n        var mod = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));\n        var rad = Math.acos(dot / mod);\n        if (ux * vy - uy * vx < 0.0) rad = -rad;\n        return rad;\n    }\n    angle = angle * Math.PI / 180;\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var TOLERANCE = 1e-6;\n    var halfDiff = startPoint.subtract(endPoint).divide(2);\n    var x1p = halfDiff.x * c + halfDiff.y * s;\n    var y1p = halfDiff.x * -s + halfDiff.y * c;\n    var x1px1p = x1p * x1p;\n    var y1py1p = y1p * y1p;\n    var lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));\n    var factor;\n    if (lambda > 1) {\n        factor = Math.sqrt(lambda);\n        rx *= factor;\n        ry *= factor;\n    }\n    var rxrx = rx * rx;\n    var ryry = ry * ry;\n    var rxy1 = rxrx * y1py1p;\n    var ryx1 = ryry * x1px1p;\n    factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);\n    if (Math.abs(factor) < TOLERANCE) factor = 0;\n    var sq = Math.sqrt(factor);\n    if (arcFlag == sweepFlag) sq = -sq;\n    var mid = startPoint.add(endPoint).divide(2);\n    var cxp = sq * rx * y1p / ry;\n    var cyp = sq * -ry * x1p / rx;\n    //return new Point2D(cxp * c - cyp * s + mid.x, cxp * s + cyp * c + mid.y);\n\n    var xcr1 = (x1p - cxp) / rx;\n    var xcr2 = (x1p + cxp) / rx;\n    var ycr1 = (y1p - cyp) / ry;\n    var ycr2 = (y1p + cyp) / ry;\n\n    var theta1 = radian(1.0, 0.0, xcr1, ycr1);\n\n    var deltaTheta = radian(xcr1, ycr1, -xcr2, -ycr2);\n    var PIx2 = Math.PI * 2.0;\n    while (deltaTheta > PIx2) deltaTheta -= PIx2;\n    while (deltaTheta < 0.0) deltaTheta += PIx2;\n    if (sweepFlag == false) deltaTheta -= PIx2;\n\n    return {\n        center: new Point2D(cxp * c - cyp * s + mid.x, cxp * s + cyp * c + mid.y),\n        rx: rx,\n        ry: ry,\n        theta1: theta1,\n        deltaTheta: deltaTheta\n    };\n}\n\n\n/**\n *  IntersectionParams\n *\n *  @param {String} name\n *  @param {Array<Point2D>} params\n *  @returns {IntersectionParams}\n */\nfunction IntersectionParams(name, params) {\n    this.init(name, params);\n}\n\n/**\n *  init\n *\n *  @param {String} type\n *  @param {Array<Point2D>} params\n */\nIntersectionParams.prototype.init = function (type, params) {\n    this.type = type;\n    this.params = params;\n    this.meta = {};\n};\n\nIntersectionParams.TYPE = {};\nvar IPTYPE = IntersectionParams.TYPE;\nIPTYPE.LINE = 'Line';\nIPTYPE.RECT = 'Rectangle';\nIPTYPE.ROUNDRECT = 'RoundRectangle';\nIPTYPE.CIRCLE = 'Circle';\nIPTYPE.ELLIPSE = 'Ellipse';\nIPTYPE.POLYGON = 'Polygon';\nIPTYPE.POLYLINE = 'Polyline';\nIPTYPE.PATH = 'Path';\nIPTYPE.ARC = 'Arc';\nIPTYPE.BEZIER2 = 'Bezier2';\nIPTYPE.BEZIER3 = 'Bezier3';\n\n\nfunction parsePointsString(points) {\n    return points.split(\" \").map(function(point) {\n        point = point.split(\",\");\n        return new Point2D(point[0], point[1]);\n    });\n}\n\nIntersectionParams.newShape = function(svgElementName, props) {\n    svgElementName = svgElementName.toLowerCase();\n\n    if(svgElementName === \"line\") {\n        return IntersectionParams.newLine(\n            new Point2D(props.x1, props.y1),\n            new Point2D(props.x2, props.y2)\n        );\n    }\n\n    if(svgElementName === \"rect\") {\n        if(props.rx > 0 || props.ry > 0) {\n            return IntersectionParams.newRoundRect(\n                props.x, props.y,\n                props.width, props.height,\n                props.rx, props.ry\n            );\n        } else {\n            return IntersectionParams.newRect(\n                props.x, props.y,\n                props.width, props.height\n            );\n        }\n    }\n\n    if(svgElementName === \"circle\") {\n        return IntersectionParams.newCircle(\n            new Point2D(props.cx, props.cy),\n            props.r\n        );\n    }\n\n    if(svgElementName === \"ellipse\") {\n        return IntersectionParams.newEllipse(\n            new Point2D(props.cx, props.cy),\n            props.rx, props.ry\n        );\n    }\n\n    if(svgElementName === \"polygon\") {\n        return IntersectionParams.newPolygon(\n            parsePointsString(props.points)\n        );\n    }\n\n    if(svgElementName === \"polyline\") {\n        return IntersectionParams.newPolyline(\n            parsePointsString(props.points)\n        );\n    }\n\n    if(svgElementName === \"path\") {\n        return IntersectionParams.newPath(\n            props.d\n        );\n    }\n\n}\n\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for arc.\n\n    @param {Point2D} startPoint - arc start point\n    @param {Point2D} endPoint - arc end point\n    @param {Number} rx - arc ellipse x radius\n    @param {Number} ry - arc ellipse y radius\n    @param {Number} angle - arc ellipse rotation in degrees\n    @param {Boolean} largeArcFlag\n    @param {Boolean} sweepFlag\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newArc = function (startPoint, endPoint, rx, ry, angle, largeArcFlag, sweepFlag) {\n    var p = getArcParameters(startPoint, endPoint, rx, ry, angle, largeArcFlag, sweepFlag);\n    return new IntersectionParams(IPTYPE.ARC, [p.center, p.rx, p.ry, (angle * Math.PI / 180), p.theta1, p.deltaTheta]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for bezier2.\n\n    @param {Point2D} p1\n    @param {Point2D} p2\n    @param {Point2D} p3\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newBezier2 = function (p1, p2, p3) {\n    return new IntersectionParams(IPTYPE.BEZIER2, [p1, p2, p3]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for bezier3.\n\n    @param {Point2D} p1\n    @param {Point2D} p2\n    @param {Point2D} p3\n    @param {Point2D} p4\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newBezier3 = function (p1, p2, p3, p4) {\n    return new IntersectionParams(IPTYPE.BEZIER3, [p1, p2, p3, p4]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for circle.\n\n    @param {Point2D} c\n    @param {Number} r\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newCircle = function (c, r) {\n    return new IntersectionParams(IPTYPE.CIRCLE, [c, r]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for ellipse.\n\n    @param {Point2D} c\n    @param {Number} rx\n    @param {Number} ry\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newEllipse = function (c, rx, ry) {\n    return new IntersectionParams(IPTYPE.ELLIPSE, [c, rx, ry]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for line.\n\n    @param {Point2D} a1\n    @param {Point2D} a2\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newLine = function (a1, a2) {\n    return new IntersectionParams(IPTYPE.LINE, [a1, a2]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for polygon.\n\n    @param {Array<Point2D>} points\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newPolygon = function (points) {\n    return new IntersectionParams(IPTYPE.POLYGON, [points]);\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for polyline.\n\n     @param {Array<Point2D>} points\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newPolyline = function (points) {\n    return new IntersectionParams(IPTYPE.POLYLINE, [points]);\n};\n\n\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for rectangle.\n\n    @param {Number} x\n    @param {Number} y\n    @param {Number} width\n    @param {Number} height\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newRect = function (x, y, width, height) {\n    var points = [];\n    points.push(new Point2D(x, y));\n    points.push(new Point2D(x + width, y));\n    points.push(new Point2D(x + width, y + height));\n    points.push(new Point2D(x, y + height));\n    return new IntersectionParams(IPTYPE.RECT, [points]);\n};\n\nvar degreesToRadians = function (angle) {\n    return angle * Math.PI / 180;\n};\n///////////////////////////////////////////////////////////////////\n/**\n    Creates IntersectionParams for round rectangle, or for rectangle if rx and ry are 0.\n\n    @param {Number} x\n    @param {Number} y\n    @param {Number} width\n    @param {Number} height\n    @param {Number} rx\n    @param {Number} ry\n    @returns {IntersectionParams}\n*/\nIntersectionParams.newRoundRect = function (x, y, width, height, rx, ry) {\n    if (rx === 0 && ry === 0)\n        return IntersectionParams.newRect(x, y, width, height);\n    if (rx === 0)\n        rx = ry;\n    if (ry === 0)\n        ry = rx;\n    if (rx > width / 2)\n        rx = width / 2;\n    if (ry > height / 2)\n        rx = height / 2;\n    var shape = [];\n    var x0 = x, x1 = x + rx, x2 = x + width - rx, x3 = x + width;\n    var y0 = y, y1 = y + ry, y2 = y + height - ry, y3 = y + height;\n    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x1, y1), rx, ry, 0, degreesToRadians(180), degreesToRadians(90)]));\n    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x1, y0), new Point2D(x2, y0)]));\n    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x2, y1), rx, ry, 0, degreesToRadians(-90), degreesToRadians(90)]));\n    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x3, y1), new Point2D(x3, y2)]));\n    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x2, y2), rx, ry, 0, degreesToRadians(0), degreesToRadians(90)]));\n    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x2, y3), new Point2D(x1, y3)]));\n    shape.push(new IntersectionParams(IPTYPE.ARC, [new Point2D(x1, y2), rx, ry, 0, degreesToRadians(90), degreesToRadians(90)]));\n    shape.push(new IntersectionParams(IPTYPE.LINE, [new Point2D(x0, y2), new Point2D(x0, y1)]));\n    shape[shape.length - 1].meta.closePath = true;\n    return new IntersectionParams(IPTYPE.ROUNDRECT, [shape]);\n};\n\n\n\n\nfunction Token(type, text) {\n    if (arguments.length > 0) {\n        this.init(type, text);\n    }\n}\nToken.prototype.init = function(type, text) {\n    this.type = type;\n    this.text = text;\n};\nToken.prototype.typeis = function(type) {\n    return this.type == type;\n}\nvar Path = {};\nPath.COMMAND = 0;\nPath.NUMBER = 1;\nPath.EOD = 2;\nPath.PARAMS = {\n    A: [\"rx\", \"ry\", \"x-axis-rotation\", \"large-arc-flag\", \"sweep-flag\", \"x\", \"y\"],\n    a: [\"rx\", \"ry\", \"x-axis-rotation\", \"large-arc-flag\", \"sweep-flag\", \"x\", \"y\"],\n    C: [\"x1\", \"y1\", \"x2\", \"y2\", \"x\", \"y\"],\n    c: [\"x1\", \"y1\", \"x2\", \"y2\", \"x\", \"y\"],\n    H: [\"x\"],\n    h: [\"x\"],\n    L: [\"x\", \"y\"],\n    l: [\"x\", \"y\"],\n    M: [\"x\", \"y\"],\n    m: [\"x\", \"y\"],\n    Q: [\"x1\", \"y1\", \"x\", \"y\"],\n    q: [\"x1\", \"y1\", \"x\", \"y\"],\n    S: [\"x2\", \"y2\", \"x\", \"y\"],\n    s: [\"x2\", \"y2\", \"x\", \"y\"],\n    T: [\"x\", \"y\"],\n    t: [\"x\", \"y\"],\n    V: [\"y\"],\n    v: [\"y\"],\n    Z: [],\n    z: []\n};\n\nfunction tokenize(d) {\n    var tokens = new Array();\n    while (d != \"\") {\n        if (d.match(/^([ \\t\\r\\n,]+)/)) {\n            d = d.substr(RegExp.$1.length);\n        } else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {\n            tokens[tokens.length] = new Token(Path.COMMAND, RegExp.$1);\n            d = d.substr(RegExp.$1.length);\n        } else if (d.match(/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {\n            tokens[tokens.length] = new Token(Path.NUMBER, parseFloat(RegExp.$1));\n            d = d.substr(RegExp.$1.length);\n        } else {\n            throw new Error(\"Unrecognized segment command: \" + d);\n        }\n    }\n    tokens[tokens.length] = new Token(Path.EOD, null);\n    return tokens;\n}\n\nIntersectionParams.newPath = function(d) {\n    var tokens = tokenize(d);\n    var index = 0;\n    var token = tokens[index];\n    var mode = \"BOD\";\n    var segments = [];\n\n    while (!token.typeis(Path.EOD)) {\n        var param_length;\n        var params = new Array();\n        if (mode == \"BOD\") {\n            if (token.text == \"M\" || token.text == \"m\") {\n                index++;\n                param_length = Path.PARAMS[token.text].length;\n                mode = token.text;\n            } else {\n                throw new Error(\"Path data must begin with a moveto command\");\n            }\n        } else {\n            if (token.typeis(Path.NUMBER)) {\n                param_length = Path.PARAMS[mode].length;\n            } else {\n                index++;\n                param_length = Path.PARAMS[token.text].length;\n                mode = token.text;\n            }\n        }\n        if ((index + param_length) < tokens.length) {\n            for (var i = index; i < index + param_length; i++) {\n                var number = tokens[i];\n                if (number.typeis(Path.NUMBER)) params[params.length] = number.text;\n                else throw new Error(\"Parameter type is not a number: \" + mode + \",\" + number.text);\n            }\n            var segment;\n            var length = segments.length;\n            var previous = (length == 0) ? null : segments[length - 1];\n            switch (mode) {\n                case \"A\":\n                    segment = new AbsoluteArcPath(params, previous);\n                    break;\n                case \"C\":\n                    segment = new AbsoluteCurveto3(params, previous);\n                    break;\n                case \"c\":\n                    segment = new RelativeCurveto3(params, previous);\n                    break;\n                case \"H\":\n                    segment = new AbsoluteHLineto(params, previous);\n                    break;\n                case \"V\":\n                    segment = new AbsoluteVLineto(params, previous);\n                    break;\n                case \"L\":\n                    segment = new AbsoluteLineto(params, previous);\n                    break;\n                case \"l\":\n                    segment = new RelativeLineto(params, previous);\n                    break;\n                case \"M\":\n                    segment = new AbsoluteMoveto(params, previous);\n                    break;\n                case \"m\":\n                    segment = new RelativeMoveto(params, previous);\n                    break;\n                case \"Q\":\n                    segment = new AbsoluteCurveto2(params, previous);\n                    break;\n                case \"q\":\n                    segment = new RelativeCurveto2(params, previous);\n                    break;\n                case \"S\":\n                    segment = new AbsoluteSmoothCurveto3(params, previous);\n                    break;\n                case \"s\":\n                    segment = new RelativeSmoothCurveto3(params, previous);\n                    break;\n                case \"T\":\n                    segment = new AbsoluteSmoothCurveto2(params, previous);\n                    break;\n                case \"t\":\n                    segment = new RelativeSmoothCurveto2(params, previous);\n                    break;\n                case \"Z\":\n                    segment = new RelativeClosePath(params, previous);\n                    break;\n                case \"z\":\n                    segment = new RelativeClosePath(params, previous);\n                    break;\n                default:\n                    throw new Error(\"Unsupported segment type: \" + mode);\n            }\n            segments.push(segment);\n            index += param_length;\n            token = tokens[index];\n            if (mode == \"M\") mode = \"L\";\n            if (mode == \"m\") mode = \"l\";\n        } else {\n            throw new Error(\"Path data ended before all parameters were found\");\n        }\n    }\n\n    var segmentParams = [];\n    for(i=0; i<segments.length; i++) {\n        var ip = segments[i].getIntersectionParams();\n        if(ip) {\n            segmentParams.push(ip);\n        }\n    }\n\n    return new IntersectionParams(IPTYPE.PATH, [segmentParams]);\n}\n\n\nfunction AbsolutePathSegment(command, params, previous) {\n    if (arguments.length > 0) this.init(command, params, previous);\n}\nAbsolutePathSegment.prototype.init = function(command, params, previous) {\n    this.command = command;\n    this.previous = previous;\n    this.points = [];\n    var index = 0;\n    while (index < params.length) {\n        this.points.push(new Point2D(params[index], params[index + 1]));\n        index += 2;\n    }\n};\nAbsolutePathSegment.prototype.getLastPoint = function() {\n    return this.points[this.points.length - 1];\n};\nAbsolutePathSegment.prototype.getIntersectionParams = function() {\n    return null;\n};\n\n\n\nfunction AbsoluteArcPath(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"A\", params, previous);\n    }\n}\nAbsoluteArcPath.prototype = new AbsolutePathSegment();\nAbsoluteArcPath.prototype.constructor = AbsoluteCurveto2;\nAbsoluteArcPath.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteArcPath.prototype.init = function(command, params, previous) {\n    var point = new Array();\n    var y = params.pop();\n    var x = params.pop();\n    point.push(x, y);\n    AbsoluteArcPath.superclass.init.call(this, command, point, previous);\n    this.rx = parseFloat(params.shift());\n    this.ry = parseFloat(params.shift());\n    this.angle = parseFloat(params.shift());\n    this.arcFlag = parseFloat(params.shift());\n    this.sweepFlag = parseFloat(params.shift());\n};\nAbsoluteArcPath.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newArc(this.previous.getLastPoint(),\n                                     this.points[0],\n                                     this.rx,\n                                     this.ry,\n                                     this.angle,\n                                     this.arcFlag,\n                                     this.sweepFlag);\n};\n\n\nfunction AbsoluteCurveto2(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"Q\", params, previous);\n    }\n}\nAbsoluteCurveto2.prototype = new AbsolutePathSegment();\nAbsoluteCurveto2.prototype.constructor = AbsoluteCurveto2;\nAbsoluteCurveto2.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteCurveto2.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier2(this.previous.getLastPoint(), this.points[0], this.points[1]);\n};\n\n\n\nfunction AbsoluteCurveto3(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"C\", params, previous);\n    }\n}\nAbsoluteCurveto3.prototype = new AbsolutePathSegment();\nAbsoluteCurveto3.prototype.constructor = AbsoluteCurveto3;\nAbsoluteCurveto3.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteCurveto3.prototype.getLastControlPoint = function() {\n    return this.points[1];\n};\nAbsoluteCurveto3.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier3(this.previous.getLastPoint(), this.points[0], this.points[1], this.points[2]);\n};\n\n\nfunction AbsoluteHLineto(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"H\", params, previous);\n    }\n}\nAbsoluteHLineto.prototype = new AbsolutePathSegment();\nAbsoluteHLineto.prototype.constructor = AbsoluteHLineto;\nAbsoluteHLineto.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteHLineto.prototype.init = function(command, params, previous) {\n    var prevPoint = previous.getLastPoint();\n    var point = new Array();\n    point.push(params.pop(), prevPoint.y);\n    AbsoluteHLineto.superclass.init.call(this, command, point, previous);\n};\n\nfunction AbsoluteVLineto(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"V\", params, previous);\n    }\n}\nAbsoluteVLineto.prototype = new AbsolutePathSegment();\nAbsoluteVLineto.prototype.constructor = AbsoluteVLineto;\nAbsoluteVLineto.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteVLineto.prototype.init = function(command, params, previous) {\n    var prevPoint = previous.getLastPoint();\n    var point = new Array();\n    point.push(prevPoint.x, params.pop());\n    AbsoluteVLineto.superclass.init.call(this, command, point, previous);\n};\n\n\nfunction AbsoluteLineto(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"L\", params, previous);\n    }\n}\nAbsoluteLineto.prototype = new AbsolutePathSegment();\nAbsoluteLineto.prototype.constructor = AbsoluteLineto;\nAbsoluteLineto.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteLineto.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newLine(this.previous.getLastPoint(), this.points[0]);\n};\n\n\n\nfunction AbsoluteMoveto(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"M\", params, previous);\n    }\n}\nAbsoluteMoveto.prototype = new AbsolutePathSegment();\nAbsoluteMoveto.prototype.constructor = AbsoluteMoveto;\nAbsoluteMoveto.superclass = AbsolutePathSegment.prototype;\n\n\nfunction AbsoluteSmoothCurveto2(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"T\", params, previous);\n    }\n}\nAbsoluteSmoothCurveto2.prototype = new AbsolutePathSegment();\nAbsoluteSmoothCurveto2.prototype.constructor = AbsoluteSmoothCurveto2;\nAbsoluteSmoothCurveto2.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteSmoothCurveto2.prototype.getControlPoint = function() {\n    var lastPoint = this.previous.getLastPoint();\n    var point;\n    if (this.previous.command.match(/^[QqTt]$/)) {\n        var ctrlPoint = this.previous.getControlPoint();\n        var diff = ctrlPoint.subtract(lastPoint);\n        point = lastPoint.subtract(diff);\n    } else {\n        point = lastPoint;\n    }\n    return point;\n};\nAbsoluteSmoothCurveto2.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier2(this.previous.getLastPoint(), this.getControlPoint(), this.points[0]);\n};\n\n\nfunction AbsoluteSmoothCurveto3(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"S\", params, previous);\n    }\n}\nAbsoluteSmoothCurveto3.prototype = new AbsolutePathSegment();\nAbsoluteSmoothCurveto3.prototype.constructor = AbsoluteSmoothCurveto3;\nAbsoluteSmoothCurveto3.superclass = AbsolutePathSegment.prototype;\n\nAbsoluteSmoothCurveto3.prototype.getFirstControlPoint = function() {\n    var lastPoint = this.previous.getLastPoint();\n    var point;\n    if (this.previous.command.match(/^[SsCc]$/)) {\n        var lastControl = this.previous.getLastControlPoint();\n        var diff = lastControl.subtract(lastPoint);\n        point = lastPoint.subtract(diff);\n    } else {\n        point = lastPoint;\n    }\n    return point;\n};\nAbsoluteSmoothCurveto3.prototype.getLastControlPoint = function() {\n    return this.points[0];\n};\nAbsoluteSmoothCurveto3.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier3(this.previous.getLastPoint(), this.getFirstControlPoint(), this.points[0], this.points[1]);\n};\n\n\nfunction RelativePathSegment(command, params, previous) {\n    if (arguments.length > 0) this.init(command, params, previous);\n}\nRelativePathSegment.prototype = new AbsolutePathSegment();\nRelativePathSegment.prototype.constructor = RelativePathSegment;\nRelativePathSegment.superclass = AbsolutePathSegment.prototype;\n\nRelativePathSegment.prototype.init = function(command, params, previous) {\n    this.command = command;\n    this.previous = previous;\n    this.points = [];\n    var lastPoint;\n    if (this.previous) lastPoint = this.previous.getLastPoint();\n    else lastPoint = new Point2D(0, 0);\n    var index = 0;\n    while (index < params.length) {\n        var point = new Point2D(lastPoint.x + params[index], lastPoint.y + params[index + 1]);\n        this.points.push(point);\n        index += 2;\n    }\n};\n\nfunction RelativeClosePath(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"z\", params, previous);\n    }\n}\nRelativeClosePath.prototype = new RelativePathSegment();\nRelativeClosePath.prototype.constructor = RelativeClosePath;\nRelativeClosePath.superclass = RelativePathSegment.prototype;\nRelativeClosePath.prototype.getLastPoint = function() {\n    var current = this.previous;\n    var point;\n    while (current) {\n        if (current.command.match(/^[mMzZ]$/)) {\n            point = current.getLastPoint();\n            break;\n        }\n        current = current.previous;\n    }\n    return point;\n};\nRelativeClosePath.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newLine(this.previous.getLastPoint(), this.getLastPoint());\n};\n\n\nfunction RelativeCurveto2(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"q\", params, previous);\n    }\n}\nRelativeCurveto2.prototype = new RelativePathSegment();\nRelativeCurveto2.prototype.constructor = RelativeCurveto2;\nRelativeCurveto2.superclass = RelativePathSegment.prototype;\n\nRelativeCurveto2.prototype.getControlPoint = function() {\n    return this.points[0];\n};\nRelativeCurveto2.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier2(this.previous.getLastPoint(), this.points[0], this.points[1]);\n};\n\n\nfunction RelativeCurveto3(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"c\", params, previous);\n    }\n}\nRelativeCurveto3.prototype = new RelativePathSegment();\nRelativeCurveto3.prototype.constructor = RelativeCurveto3;\nRelativeCurveto3.superclass = RelativePathSegment.prototype;\n\nRelativeCurveto3.prototype.getLastControlPoint = function() {\n    return this.points[1];\n};\nRelativeCurveto3.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier3(this.previous.getLastPoint(), this.points[0], this.points[1], this.points[2]);\n};\n\n\nfunction RelativeLineto(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"l\", params, previous);\n    }\n}\nRelativeLineto.prototype = new RelativePathSegment();\nRelativeLineto.prototype.constructor = RelativeLineto;\nRelativeLineto.superclass = RelativePathSegment.prototype;\n\nRelativeLineto.prototype.toString = function() {\n    var lastPoint;\n    var point;\n    var cmd;\n    if (this.previous) lastPoint = this.previous.getLastPoint();\n    else lastPoint = new Point2D(0, 0);\n    point = this.points[0].subtract(lastPoint);\n    if (this.previous.constructor != this.constuctor)\n        if (this.previous.constructor != RelativeMoveto) cmd = this.command;\n    return cmd + point.toString();\n};\nRelativeLineto.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newLine(this.previous.getLastPoint(), this.points[0]);\n};\n\n\n\nfunction RelativeMoveto(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"m\", params, previous);\n    }\n}\nRelativeMoveto.prototype = new RelativePathSegment();\nRelativeMoveto.prototype.constructor = RelativeMoveto;\nRelativeMoveto.superclass = RelativePathSegment.prototype;\n\n\n\nfunction RelativeSmoothCurveto2(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"t\", params, previous);\n    }\n}\nRelativeSmoothCurveto2.prototype = new RelativePathSegment();\nRelativeSmoothCurveto2.prototype.constructor = RelativeSmoothCurveto2;\nRelativeSmoothCurveto2.superclass = RelativePathSegment.prototype;\n\nRelativeSmoothCurveto2.prototype.getControlPoint = function() {\n    var lastPoint = this.previous.getLastPoint();\n    var point;\n    if (this.previous.command.match(/^[QqTt]$/)) {\n        var ctrlPoint = this.previous.getControlPoint();\n        var diff = ctrlPoint.subtract(lastPoint);\n        point = lastPoint.subtract(diff);\n    } else {\n        point = lastPoint;\n    }\n    return point;\n};\nRelativeSmoothCurveto2.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier2(this.previous.getLastPoint(), this.getControlPoint(), this.points[0]);\n};\n\n\n\nfunction RelativeSmoothCurveto3(params, previous) {\n    if (arguments.length > 0) {\n        this.init(\"s\", params, previous);\n    }\n}\nRelativeSmoothCurveto3.prototype = new RelativePathSegment();\nRelativeSmoothCurveto3.prototype.constructor = RelativeSmoothCurveto3;\nRelativeSmoothCurveto3.superclass = RelativePathSegment.prototype;\n\nRelativeSmoothCurveto3.prototype.getFirstControlPoint = function() {\n    var lastPoint = this.previous.getLastPoint();\n    var point;\n    if (this.previous.command.match(/^[SsCc]$/)) {\n        var lastControl = this.previous.getLastControlPoint();\n        var diff = lastControl.subtract(lastPoint);\n        point = lastPoint.subtract(diff);\n    } else {\n        point = lastPoint;\n    }\n    return point;\n};\nRelativeSmoothCurveto3.prototype.getLastControlPoint = function() {\n    return this.points[0];\n};\nRelativeSmoothCurveto3.prototype.getIntersectionParams = function() {\n    return IntersectionParams.newBezier3(this.previous.getLastPoint(), this.getFirstControlPoint(), this.points[0], this.points[1]);\n};\n\n\nexport default IntersectionParams;\n","/**\n *\n *   Polynomial.js\n *\n *   copyright 2002, 2013 Kevin Lindsey\n * \n *   contribution {@link http://github.com/Quazistax/kld-polynomial}\n *       @copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com>\n *       @license MIT\n */\n\nPolynomial.TOLERANCE = 1e-6;\nPolynomial.ACCURACY  = 15;\n\n\n/**\n *  interpolate\n *\n *  @param {Array<Number>} xs\n *  @param {Array<Number>} ys\n *  @param {Number} n\n *  @param {Number} offset\n *  @param {Number} x\n *\n *  @returns {y:Number, dy:Number}\n */\nPolynomial.interpolate = function(xs, ys, n, offset, x) {\n    if ( xs.constructor !== Array || ys.constructor !== Array )\n        throw new Error(\"Polynomial.interpolate: xs and ys must be arrays\");\n    if ( isNaN(n) || isNaN(offset) || isNaN(x) )\n        throw new Error(\"Polynomial.interpolate: n, offset, and x must be numbers\");\n\n    var y  = 0;\n    var dy = 0;\n    var c = new Array(n);\n    var d = new Array(n);\n    var ns = 0;\n    var result;\n\n    var diff = Math.abs(x - xs[offset]);\n    for ( var i = 0; i < n; i++ ) {\n        var dift = Math.abs(x - xs[offset+i]);\n\n        if ( dift < diff ) {\n            ns = i;\n            diff = dift;\n        }\n        c[i] = d[i] = ys[offset+i];\n    }\n    y = ys[offset+ns];\n    ns--;\n\n    for ( var m = 1; m < n; m++ ) {\n        for ( var i = 0; i < n-m; i++ ) {\n            var ho = xs[offset+i] - x;\n            var hp = xs[offset+i+m] - x;\n            var w = c[i+1]-d[i];\n            var den = ho - hp;\n\n            if ( den == 0.0 ) {\n                result = { y: 0, dy: 0};\n                break;\n            }\n\n            den = w / den;\n            d[i] = hp*den;\n            c[i] = ho*den;\n        }\n        dy = (2*(ns+1) < (n-m)) ? c[ns+1] : d[ns--];\n        y += dy;\n    }\n\n    return { y: y, dy: dy };\n};\n\n\n/**\n *  Polynomial\n *\n *  @returns {Polynomial}\n */\nfunction Polynomial() {\n    this.init( arguments );\n}\n\n\n/**\n *  init\n */\nPolynomial.prototype.init = function(coefs) {\n    this.coefs = new Array();\n\n    for ( var i = coefs.length - 1; i >= 0; i-- )\n        this.coefs.push( coefs[i] );\n\n    this._variable = \"t\";\n    this._s = 0;\n};\n\n\n/**\n *  eval\n */\nPolynomial.prototype.eval = function(x) {\n    if ( isNaN(x) )\n        throw new Error(\"Polynomial.eval: parameter must be a number\");\n\n    var result = 0;\n\n    for ( var i = this.coefs.length - 1; i >= 0; i-- )\n        result = result * x + this.coefs[i];\n\n    return result;\n};\n\n\n/**\n *  add\n */\nPolynomial.prototype.add = function(that) {\n    var result = new Polynomial();\n    var d1 = this.getDegree();\n    var d2 = that.getDegree();\n    var dmax = Math.max(d1,d2);\n\n    for ( var i = 0; i <= dmax; i++ ) {\n        var v1 = (i <= d1) ? this.coefs[i] : 0;\n        var v2 = (i <= d2) ? that.coefs[i] : 0;\n\n        result.coefs[i] = v1 + v2;\n    }\n\n    return result;\n};\n\n\n/**\n *  multiply\n */\nPolynomial.prototype.multiply = function(that) {\n    var result = new Polynomial();\n\n    for ( var i = 0; i <= this.getDegree() + that.getDegree(); i++ )\n        result.coefs.push(0);\n\n    for ( var i = 0; i <= this.getDegree(); i++ )\n        for ( var j = 0; j <= that.getDegree(); j++ )\n            result.coefs[i+j] += this.coefs[i] * that.coefs[j];\n\n    return result;\n};\n\n\n/**\n *  divide_scalar\n */\nPolynomial.prototype.divide_scalar = function(scalar) {\n    for ( var i = 0; i < this.coefs.length; i++ )\n        this.coefs[i] /= scalar;\n};\n\n\n/**\n *  simplify\n */\nPolynomial.prototype.simplify = function() {\n    var TOLERANCE = 1e-15;\n    for ( var i = this.getDegree(); i >= 0; i-- ) {\n        if ( Math.abs( this.coefs[i] ) <= TOLERANCE )\n            this.coefs.pop();\n        else\n            break;\n    }\n};\n\n\n/**\n *  bisection\n */\nPolynomial.prototype.bisection = function(min, max) {\n    var minValue = this.eval(min);\n    var maxValue = this.eval(max);\n    var result;\n\n    if ( Math.abs(minValue) <= Polynomial.TOLERANCE )\n        result = min;\n    else if ( Math.abs(maxValue) <= Polynomial.TOLERANCE )\n        result = max;\n    else if ( minValue * maxValue <= 0 ) {\n        var tmp1  = Math.log(max - min);\n        var tmp2  = Math.LN10 * Polynomial.ACCURACY;\n        var iters = Math.ceil( (tmp1+tmp2) / Math.LN2 );\n\n        for ( var i = 0; i < iters; i++ ) {\n            result = 0.5 * (min + max);\n            var value = this.eval(result);\n\n            if ( Math.abs(value) <= Polynomial.TOLERANCE ) {\n                break;\n            }\n\n            if ( value * minValue < 0 ) {\n                max = result;\n                maxValue = value;\n            } else {\n                min = result;\n                minValue = value;\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  toString\n */\nPolynomial.prototype.toString = function() {\n    var coefs = new Array();\n    var signs = new Array();\n\n    for ( var i = this.coefs.length - 1; i >= 0; i-- ) {\n        var value = Math.round(this.coefs[i]*1000)/1000;\n        //var value = this.coefs[i];\n\n        if ( value != 0 ) {\n            var sign = ( value < 0 ) ? \" - \" : \" + \";\n\n            value = Math.abs(value);\n            if ( i > 0 )\n                if ( value == 1 )\n                    value = this._variable;\n                else\n                    value += this._variable;\n            if ( i > 1 ) value += \"^\" + i;\n\n            signs.push( sign );\n            coefs.push( value );\n        }\n    }\n\n    signs[0] = ( signs[0] == \" + \" ) ? \"\" : \"-\";\n\n    var result = \"\";\n    for ( var i = 0; i < coefs.length; i++ )\n        result += signs[i] + coefs[i];\n\n    return result;\n};\n\n\n/**\n *  trapezoid\n *  Based on trapzd in \"Numerical Recipes in C\", page 137\n */\nPolynomial.prototype.trapezoid = function(min, max, n) {\n    if ( isNaN(min) || isNaN(max) || isNaN(n) )\n        throw new Error(\"Polynomial.trapezoid: parameters must be numbers\");\n\n    var range = max - min;\n    var TOLERANCE = 1e-7;\n\n    if ( n == 1 ) {\n        var minValue = this.eval(min);\n        var maxValue = this.eval(max);\n        this._s = 0.5*range*( minValue + maxValue );\n    } else {\n        var it = 1 << (n-2);\n        var delta = range / it;\n        var x = min + 0.5*delta;\n        var sum = 0;\n\n        for ( var i = 0; i < it; i++ ) {\n            sum += this.eval(x);\n            x += delta;\n        }\n        this._s = 0.5*(this._s + range*sum/it);\n    }\n\n    if ( isNaN(this._s) )\n        throw new Error(\"Polynomial.trapezoid: this._s is NaN\");\n\n    return this._s;\n};\n\n\n/**\n *  simpson\n *  Based on trapzd in \"Numerical Recipes in C\", page 139\n */\nPolynomial.prototype.simpson = function(min, max) {\n    if ( isNaN(min) || isNaN(max) )\n        throw new Error(\"Polynomial.simpson: parameters must be numbers\");\n\n    var range = max - min;\n    var st = 0.5 * range * ( this.eval(min) + this.eval(max) );\n    var t = st;\n    var s = 4.0*st/3.0;\n    var os = s;\n    var ost = st;\n    var TOLERANCE = 1e-7;\n\n    var it = 1;\n    for ( var n = 2; n <= 20; n++ ) {\n        var delta = range / it;\n        var x     = min + 0.5*delta;\n        var sum   = 0;\n\n        for ( var i = 1; i <= it; i++ ) {\n            sum += this.eval(x);\n            x += delta;\n        }\n\n        t = 0.5 * (t + range * sum / it);\n        st = t;\n        s = (4.0*st - ost)/3.0;\n\n        if ( Math.abs(s-os) < TOLERANCE*Math.abs(os) )\n            break;\n\n        os = s;\n        ost = st;\n        it <<= 1;\n    }\n\n    return s;\n};\n\n\n/**\n *  romberg\n */\nPolynomial.prototype.romberg = function(min, max) {\n    if ( isNaN(min) || isNaN(max) )\n        throw new Error(\"Polynomial.romberg: parameters must be numbers\");\n\n    var MAX = 20;\n    var K = 3;\n    var TOLERANCE = 1e-6;\n    var s = new Array(MAX+1);\n    var h = new Array(MAX+1);\n    var result = { y: 0, dy: 0 };\n\n    h[0] = 1.0;\n    for ( var j = 1; j <= MAX; j++ ) {\n        s[j-1] = this.trapezoid(min, max, j);\n        if ( j >= K ) {\n            result = Polynomial.interpolate(h, s, K, j-K, 0.0);\n            if ( Math.abs(result.dy) <= TOLERANCE*result.y) break;\n        }\n        s[j] = s[j-1];\n        h[j] = 0.25 * h[j-1];\n    }\n\n    return result.y;\n};\n\n// getters and setters\n\n/**\n *  get degree\n */\nPolynomial.prototype.getDegree = function() {\n    return this.coefs.length - 1;\n};\n\n\n/**\n *  getDerivative\n */\nPolynomial.prototype.getDerivative = function() {\n    var derivative = new Polynomial();\n\n    for ( var i = 1; i < this.coefs.length; i++ ) {\n        derivative.coefs.push(i*this.coefs[i]);\n    }\n\n    return derivative;\n};\n\n\n/**\n *  getRoots\n */\nPolynomial.prototype.getRoots = function() {\n    var result;\n\n    this.simplify();\n    switch ( this.getDegree() ) {\n        case 0: result = new Array();              break;\n        case 1: result = this.getLinearRoot();     break;\n        case 2: result = this.getQuadraticRoots(); break;\n        case 3: result = this.getCubicRoots();     break;\n        case 4: result = this.getQuarticRoots();   break;\n        default:\n            result = new Array();\n            // should try Newton's method and/or bisection\n    }\n\n    return result;\n};\n\n\n/**\n *  getRootsInInterval\n */\nPolynomial.prototype.getRootsInInterval = function(min, max) {\n    var roots = new Array();\n    var root;\n\n    if ( this.getDegree() == 1 ) {\n        root = this.bisection(min, max);\n        if ( root != null ) roots.push(root);\n    } else {\n        // get roots of derivative\n        var deriv  = this.getDerivative();\n        var droots = deriv.getRootsInInterval(min, max);\n\n        if ( droots.length > 0 ) {\n            // find root on [min, droots[0]]\n            root = this.bisection(min, droots[0]);\n            if ( root != null ) roots.push(root);\n\n            // find root on [droots[i],droots[i+1]] for 0 <= i <= count-2\n            for ( i = 0; i <= droots.length-2; i++ ) {\n                root = this.bisection(droots[i], droots[i+1]);\n                if ( root != null ) roots.push(root);\n            }\n\n            // find root on [droots[count-1],xmax]\n            root = this.bisection(droots[droots.length-1], max);\n            if ( root != null ) roots.push(root);\n        } else {\n            // polynomial is monotone on [min,max], has at most one root\n            root = this.bisection(min, max);\n            if ( root != null ) roots.push(root);\n        }\n    }\n\n    return roots;\n};\n\n\n/**\n *  getLinearRoot\n */\nPolynomial.prototype.getLinearRoot = function() {\n    var result = new Array();\n    var a = this.coefs[1];\n\n    if ( a != 0 )\n        result.push( -this.coefs[0] / a );\n\n    return result;\n};\n\n\n/**\n *  getQuadraticRoots\n */\nPolynomial.prototype.getQuadraticRoots = function() {\n    var results = new Array();\n\n    if ( this.getDegree() == 2 ) {\n        var a = this.coefs[2];\n        var b = this.coefs[1] / a;\n        var c = this.coefs[0] / a;\n        var d = b*b - 4*c;\n\n        if ( d > 0 ) {\n            var e = Math.sqrt(d);\n\n            results.push( 0.5 * (-b + e) );\n            results.push( 0.5 * (-b - e) );\n        } else if ( d == 0 ) {\n            // really two roots with same value, but we only return one\n            results.push( 0.5 * -b );\n        }\n    }\n\n    return results;\n};\n\n\n/**\n *  getCubicRoots\n *\n *  This code is based on MgcPolynomial.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.geometrictools.com\n */\nPolynomial.prototype.getCubicRoots = function() {\n    var results = new Array();\n\n    if ( this.getDegree() == 3 ) {\n        var c3 = this.coefs[3];\n        var c2 = this.coefs[2] / c3;\n        var c1 = this.coefs[1] / c3;\n        var c0 = this.coefs[0] / c3;\n\n        var a       = (3*c1 - c2*c2) / 3;\n        var b       = (2*c2*c2*c2 - 9*c1*c2 + 27*c0) / 27;\n        var offset  = c2 / 3;\n        var discrim = b*b/4 + a*a*a/27;\n        var halfB   = b / 2;\n\n        var ZEROepsilon = this.zeroErrorEstimate();\n        if (Math.abs(discrim) <= ZEROepsilon) discrim = 0;\n\n        if ( discrim > 0 ) {\n            var e = Math.sqrt(discrim);\n            var tmp;\n            var root;\n\n            tmp = -halfB + e;\n            if ( tmp >= 0 )\n                root = Math.pow(tmp, 1/3);\n            else\n                root = -Math.pow(-tmp, 1/3);\n\n            tmp = -halfB - e;\n            if ( tmp >= 0 )\n                root += Math.pow(tmp, 1/3);\n            else\n                root -= Math.pow(-tmp, 1/3);\n\n            results.push( root - offset );\n        } else if ( discrim < 0 ) {\n            var distance = Math.sqrt(-a/3);\n            var angle    = Math.atan2( Math.sqrt(-discrim), -halfB) / 3;\n            var cos      = Math.cos(angle);\n            var sin      = Math.sin(angle);\n            var sqrt3    = Math.sqrt(3);\n\n            results.push( 2*distance*cos - offset );\n            results.push( -distance * (cos + sqrt3 * sin) - offset);\n            results.push( -distance * (cos - sqrt3 * sin) - offset);\n        } else {\n            var tmp;\n\n            if ( halfB >= 0 )\n                tmp = -Math.pow(halfB, 1/3);\n            else\n                tmp = Math.pow(-halfB, 1/3);\n\n            results.push( 2*tmp - offset );\n            // really should return next root twice, but we return only one\n            results.push( -tmp - offset );\n        }\n    }\n\n    return results;\n};\n\n/**\n    Sign of a number (+1, -1, +0, -0).\n */\nvar sign = function (x) {\n    return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? x : NaN : NaN;\n};\n\n\n///////////////////////////////////////////////////////////////////\n/**\n    Calculates roots of quartic polynomial. <br/>\n    First, derivative roots are found, then used to split quartic polynomial \n    into segments, each containing one root of quartic polynomial.\n    Segments are then passed to newton's method to find roots.\n\n    @returns {Array<Number>} roots\n*/\nPolynomial.prototype.getQuarticRoots = function () {\n    var results = [];\n\n    var n = this.getDegree();\n    if (n == 4) {\n\n        var poly = new Polynomial();\n        poly.coefs = this.coefs.slice();\n        poly.divide_scalar(poly.coefs[n]);\n        var ERRF = 1e-15;\n        if (Math.abs(poly.coefs[0]) < 10 * ERRF * Math.abs(poly.coefs[3]))\n            poly.coefs[0] = 0;\n        var poly_d = poly.getDerivative();\n        var derrt = poly_d.getRoots().sort(function (a, b) { return a - b; });\n        var dery = [];\n        var nr = derrt.length - 1;\n        var i;\n        var rb = this.bounds();\n        maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n        var ZEROepsilon = this.zeroErrorEstimate(maxabsX);\n        \n        for (i = 0; i <= nr; i++) {\n            dery.push(poly.eval(derrt[i]));\n        }\n\n        for (i = 0; i <= nr; i++) {\n            if (Math.abs(dery[i]) < ZEROepsilon)\n                dery[i] = 0;\n        }\n\n        i = 0;\n        var dx = Math.max(0.1 * (rb.maxX - rb.minX) / n, ERRF);\n        var guesses = [];\n        var minmax = [];\n        if (nr > -1) {\n            if (dery[0] != 0) {\n                if (sign(dery[0]) != sign(poly.eval(derrt[0] - dx) - dery[0])) {\n                    guesses.push(derrt[0] - dx);\n                    minmax.push([rb.minX, derrt[0]]);\n                }\n            }\n            else {\n                results.push(derrt[0], derrt[0]);\n                i++;\n            }\n\n            for (; i < nr; i++) {\n                if (dery[i + 1] == 0) {\n                    results.push(derrt[i + 1], derrt[i + 1]);\n                    i++;\n                }\n                else if (sign(dery[i]) != sign(dery[i + 1])) {\n                    guesses.push((derrt[i] + derrt[i + 1]) / 2);\n                    minmax.push([derrt[i], derrt[i + 1]]);\n                }\n            }\n            if (dery[nr] != 0 && sign(dery[nr]) != sign(poly.eval(derrt[nr] + dx) - dery[nr])) {\n                guesses.push(derrt[nr] + dx);\n                minmax.push([derrt[nr], rb.maxX]);\n            }\n        }\n\n        var f = function (x) { return poly.eval(x); };\n        var df = function (x) { return poly_d.eval(x); };\n        if (guesses.length > 0) {\n            for (i = 0; i < guesses.length; i++) {\n                guesses[i] = Polynomial.newton_secant_bisection(guesses[i], f, df, 32, minmax[i][0], minmax[i][1]);\n            }\n        }\n\n        results = results.concat(guesses);\n    }\n    return results;\n};\n\n///////////////////////////////////////////////////////////////////\n/**\n    Estimate what is the maximum polynomial evaluation error value under which polynomial evaluation could be in fact 0.\n    \n    @returns {Number} \n*/\nPolynomial.prototype.zeroErrorEstimate = function (maxabsX) {\n    var poly = this;\n    var ERRF = 1e-15;\n    if (typeof maxabsX === 'undefined') {\n        var rb = poly.bounds();\n        maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n    }\n    if (maxabsX < 0.001) {\n        return 2*Math.abs(poly.eval(ERRF));\n    }\n    var n = poly.coefs.length - 1;\n    var an = poly.coefs[n];\n    return 10 * ERRF * poly.coefs.reduce(function (m, v, i) {\n        var nm = v / an * Math.pow(maxabsX, i);\n        return nm > m ? nm : m;\n    }, 0);\n}\n\n///////////////////////////////////////////////////////////////////\n/**\n    Calculates upper Real roots bounds. <br/>\n    Real roots are in interval [negX, posX]. Determined by Fujiwara method.\n    @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n\n    @returns {{ negX: Number, posX: Number }}\n*/\nPolynomial.prototype.bounds_UpperReal_Fujiwara = function () {\n    var a = this.coefs;\n    var n = a.length - 1;\n    var an = a[n];\n    if (an != 1) {\n        a = this.coefs.map(function (v) { return v / an; });\n    }\n    var b = a.map(function (v, i) { return (i < n) ? Math.pow(Math.abs((i == 0) ? v / 2 : v), 1 / (n - i)) : v; });\n\n    var coefSelectionFunc;\n    var find2Max = function (acc, bi, i) {\n        if (coefSelectionFunc(i)) {\n            if (acc.max < bi) {\n                acc.nearmax = acc.max;\n                acc.max = bi;\n            }\n            else if (acc.nearmax < bi) {\n                acc.nearmax = bi;\n            }\n        }\n        return acc;\n    };\n\n    coefSelectionFunc = function (i) { return i < n && a[i] < 0; };\n    var max_nearmax_pos = b.reduce(find2Max, { max: 0, nearmax: 0 });\n\n    coefSelectionFunc = function (i) { return i < n && ((n % 2 == i % 2) ? a[i] < 0 : a[i] > 0); };\n    var max_nearmax_neg = b.reduce(find2Max, { max: 0, nearmax: 0 });\n\n    return {\n        negX: -2 * max_nearmax_neg.max,\n        posX: 2 * max_nearmax_pos.max\n    };\n};\n\n\n///////////////////////////////////////////////////////////////////\n/** \n    Calculates lower Real roots bounds. <br/>\n    There are no Real roots in interval <negX, posX>. Determined by Fujiwara method.\n    @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n\n    @returns {{ negX: Number, posX: Number }}\n*/\nPolynomial.prototype.bounds_LowerReal_Fujiwara = function () {\n    var poly = new Polynomial();\n    poly.coefs = this.coefs.slice().reverse();\n    var res = poly.bounds_UpperReal_Fujiwara();\n    res.negX = 1 / res.negX;\n    res.posX = 1 / res.posX;\n    return res;\n};\n\n\n///////////////////////////////////////////////////////////////////\n/** \n    Calculates left and right Real roots bounds. <br/>\n    Real roots are in interval [minX, maxX]. Combines Fujiwara lower and upper bounds to get minimal interval.\n    @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n\n    @returns {{ minX: Number, maxX: Number }}\n*/\nPolynomial.prototype.bounds = function () {\n    var urb = this.bounds_UpperReal_Fujiwara();\n    var rb = { minX: urb.negX, maxX: urb.posX };\n    if (urb.negX === 0 && urb.posX === 0)\n        return rb;\n    if (urb.negX === 0) {\n        rb.minX = this.bounds_LowerReal_Fujiwara().posX;\n    }\n    else if (urb.posX === 0) {\n        rb.maxX = this.bounds_LowerReal_Fujiwara().negX;\n    }\n    if (rb.minX > rb.maxX) {\n        //console.log('Polynomial.prototype.bounds: poly has no real roots? or floating point error?');\n        rb.minX = rb.maxX = 0;\n    }\n    return rb;\n    // TODO: if sure that there are no complex roots \n    // (maybe by using Sturm's theorem) use:\n    //return this.bounds_Real_Laguerre();\n};\n\n\n/////////////////////////////////////////////////////////////////// \n/**\n    Newton's (Newton-Raphson) method for finding Real roots on univariate function. <br/>\n    When using bounds, algorithm falls back to secant if newton goes out of range.\n    Bisection is fallback for secant when determined secant is not efficient enough.\n    @see {@link http://en.wikipedia.org/wiki/Newton%27s_method}\n    @see {@link http://en.wikipedia.org/wiki/Secant_method}\n    @see {@link http://en.wikipedia.org/wiki/Bisection_method}\n\n    @param {Number} x0 - Inital root guess\n    @param {function(x)} f - Function which root we are trying to find\n    @param {function(x)} df - Derivative of function f\n    @param {Number} max_iterations - Maximum number of algorithm iterations\n    @param {Number} [min_x] - Left bound value\n    @param {Number} [max_x] - Right bound value\n    @returns {Number} - root\n*/\nPolynomial.newton_secant_bisection = function (x0, f, df, max_iterations, min, max) {\n    var x, prev_dfx = 0, dfx, prev_x_ef_correction = 0, x_correction, x_new;\n    var v, y_atmin, y_atmax;\n    x = x0;\n    var ACCURACY = 14;\n    var min_correction_factor = Math.pow(10, -ACCURACY);\n    var isBounded = (typeof min === 'number' && typeof max === 'number');\n    if (isBounded) {\n        if (min > max)\n            throw new Error(\"newton root finding: min must be greater than max\");\n        y_atmin = f(min);\n        y_atmax = f(max);\n        if (sign(y_atmin) ==  sign(y_atmax))\n            throw new Error(\"newton root finding: y values of bounds must be of opposite sign\");\n    }\n\n    var isEnoughCorrection = function () {\n        // stop if correction is too small\n        // or if correction is in simple loop\n        return (Math.abs(x_correction) <= min_correction_factor * Math.abs(x))\n            || (prev_x_ef_correction == (x - x_correction) - x);\n    };\n\n    var i;\n    //var stepMethod;\n    //var details = [];\n    for (i = 0; i < max_iterations; i++) {\n        dfx = df(x);\n        if (dfx == 0) {\n            if (prev_dfx == 0) {\n                // error\n                throw new Error(\"newton root finding: df(x) is zero\");\n                //return null;\n            }\n            else {\n                // use previous derivation value\n                dfx = prev_dfx;\n            }\n            // or move x a little?\n            //dfx = df(x != 0 ? x + x * 1e-15 : 1e-15);\n        }\n        //stepMethod = 'newton';\n        prev_dfx = dfx;\n        y = f(x);\n        x_correction = y / dfx;\n        x_new = x - x_correction;\n        if (isEnoughCorrection()) {\n            break;\n        }\n\n        if (isBounded) {\n            if (sign(y) == sign(y_atmax)) {\n                max = x;\n                y_atmax = y;\n            }\n            else if (sign(y) == sign(y_atmin)) {\n                min = x;\n                y_atmin = y;\n            }\n            else {\n                x = x_new;\n                //console.log(\"newton root finding: sign(y) not matched.\");\n                break;\n            }\n\n            if ((x_new < min) || (x_new > max)) {\n                if (sign(y_atmin) == sign(y_atmax)) {\n                    break;\n                }\n\n                var RATIO_LIMIT = 50;\n                var AIMED_BISECT_OFFSET = 0.25; // [0, 0.5)\n                var dy = y_atmax - y_atmin;\n                var dx = max - min;\n\n                if (dy == 0) {\n                    //stepMethod = 'bisect';\n                    x_correction = x - (min + dx * 0.5);\n                }\n                else if (Math.abs(dy / Math.min(y_atmin, y_atmax)) > RATIO_LIMIT) {\n                    //stepMethod = 'aimed bisect';\n                    x_correction = x - (min + dx * (0.5 + (Math.abs(y_atmin) < Math.abs(y_atmax) ? -AIMED_BISECT_OFFSET : AIMED_BISECT_OFFSET)));\n                }\n                else {\n                    //stepMethod = 'secant'; \n                    x_correction = x - (min - y_atmin / dy * dx);\n                }\n                x_new = x - x_correction;\n\n                if (isEnoughCorrection()) {\n                    break;\n                }\n            }\n        }\n        //details.push([stepMethod, i, x, x_new, x_correction, min, max, y]);\n        prev_x_ef_correction = x - x_new;\n        x = x_new;\n    }\n    //details.push([stepMethod, i, x, x_new, x_correction, min, max, y]);\n    //console.log(details.join('\\r\\n'));\n    //if (i == max_iterations)\n    //    console.log('newt: steps=' + ((i==max_iterations)? i:(i + 1)));\n    return x;\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Polynomial;\n}\n","/**\n *\n *   SqrtPolynomial.js\n *\n *   copyright 2003, 2013 Kevin Lindsey\n *\n */\n\nif (typeof module !== \"undefined\") {\n    var Polynomial = require(\"./Polynomial\");\n}\n\n/**\n *   class variables\n */\nSqrtPolynomial.VERSION = 1.0;\n\n// setup inheritance\nSqrtPolynomial.prototype             = new Polynomial();\nSqrtPolynomial.prototype.constructor = SqrtPolynomial;\nSqrtPolynomial.superclass            = Polynomial.prototype;\n\n\n/**\n *  SqrtPolynomial\n */\nfunction SqrtPolynomial() {\n    this.init( arguments );\n}\n\n\n/**\n *  eval\n *\n *  @param {Number} x\n *  @returns {Number}\n */\nSqrtPolynomial.prototype.eval = function(x) {\n    var TOLERANCE = 1e-7;\n    var result = SqrtPolynomial.superclass.eval.call(this, x);\n\n    // NOTE: May need to change the following.  I added these to capture\n    // some really small negative values that were being generated by one\n    // of my Bezier arcLength functions\n    if ( Math.abs(result) < TOLERANCE ) result = 0;\n    if ( result < 0 )\n        throw new Error(\"SqrtPolynomial.eval: cannot take square root of negative number\");\n\n    return Math.sqrt(result);\n};\n\nSqrtPolynomial.prototype.toString = function() {\n    var result = SqrtPolynomial.superclass.toString.call(this);\n\n    return \"sqrt(\" + result + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = SqrtPolynomial;\n}\n","// expose classes\n\nexports.Polynomial = require('./lib/Polynomial');\nexports.SqrtPolynomial = require('./lib/SqrtPolynomial');\n","/**\n *  Intersection\n */\nfunction Intersection(status) {\n    this.init(status);\n}\n\n/**\n *  init\n *\n *  @param {String} status\n *  @returns {Intersection}\n */\nIntersection.prototype.init = function(status) {\n    this.status = status;\n    this.points = [];\n};\n\n/**\n *  appendPoint\n *\n *  @param {Point2D} point\n */\nIntersection.prototype.appendPoint = function(point) {\n    this.points.push(point);\n};\n\n/**\n *  appendPoints\n *\n *  @param {Array<Point2D>} points\n */\nIntersection.prototype.appendPoints = function(points) {\n    this.points = this.points.concat(points);\n};\n\nexport default Intersection;\n","import Intersection from '../Intersection';\nimport {Point2D, Vector2D} from 'kld-affine';\nimport {Polynomial} from 'kld-polynomial';\n\nfunction removeMultipleRootsIn01(roots) {\n    var ZEROepsilon = 1e-15;\n    roots.sort(function (a, b) { return a - b; });\n    for (var i = 1; i < roots.length;) {\n        if (Math.abs(roots[i] - roots[i - 1]) < ZEROepsilon) {\n            roots.splice(i, 1);\n        }\n        else {\n            i++;\n        }\n    }\n}\n\n/**\n *  intersectBezier2Bezier2\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} a3\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @param {Point2D} b3\n *  @returns {Intersection}\n */\nexport function intersectBezier2Bezier2(a1, a2, a3, b1, b2, b3) {\n    var a, b;\n    var c12, c11, c10;\n    var c22, c21, c20;\n    var result = new Intersection();\n    var poly;\n\n    a = a2.multiply(-2);\n    c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    c11 = a.add(b);\n\n    c10 = new Point2D(a1.x, a1.y);\n\n    a = b2.multiply(-2);\n    c22 = b1.add(a.add(b3));\n\n    a = b1.multiply(-2);\n    b = b2.multiply(2);\n    c21 = a.add(b);\n\n    c20 = new Point2D(b1.x, b1.y);\n\n    var v0, v1, v2, v3, v4, v5, v6;\n    if ( c12.y === 0 ) {\n        v0 = c12.x*(c10.y - c20.y);\n        v1 = v0 - c11.x*c11.y;\n        v2 = v0 + v1;\n        v3 = c11.y*c11.y;\n\n        poly = new Polynomial(\n            c12.x*c22.y*c22.y,\n            2*c12.x*c21.y*c22.y,\n            c12.x*c21.y*c21.y - c22.x*v3 - c22.y*v0 - c22.y*v1,\n            -c21.x*v3 - c21.y*v0 - c21.y*v1,\n            (c10.x - c20.x)*v3 + (c10.y - c20.y)*v1\n        );\n    } else {\n        v0 = c12.x*c22.y - c12.y*c22.x;\n        v1 = c12.x*c21.y - c21.x*c12.y;\n        v2 = c11.x*c12.y - c11.y*c12.x;\n        v3 = c10.y - c20.y;\n        v4 = c12.y*(c10.x - c20.x) - c12.x*v3;\n        v5 = -c11.y*v2 + c12.y*v4;\n        v6 = v2*v2;\n\n        poly = new Polynomial(\n            v0*v0,\n            2*v0*v1,\n            (-c22.y*v6 + c12.y*v1*v1 + c12.y*v0*v4 + v0*v5) / c12.y,\n            (-c21.y*v6 + c12.y*v1*v4 + v1*v5) / c12.y,\n            (v3*v6 + v4*v5) / c12.y\n        );\n    }\n\n    var roots = poly.getRoots();\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n\n        if ( 0 <= s && s <= 1 ) {\n            var xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s*c21.x - s*s*c22.x\n            ).getRoots();\n            var yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s*c21.y - s*s*c22.y\n            ).getRoots();\n\n            if ( xRoots.length > 0 && yRoots.length > 0 ) {\n                var TOLERANCE = 1e-4;\n\n                checkRoots:\n                    for ( var j = 0; j < xRoots.length; j++ ) {\n                        var xRoot = xRoots[j];\n\n                        if ( 0 <= xRoot && xRoot <= 1 ) {\n                            for ( var k = 0; k < yRoots.length; k++ ) {\n                                if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                                    result.points.push( c22.multiply(s*s).add(c21.multiply(s).add(c20)) );\n                                    break checkRoots;\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    }\n\n    return result;\n}\n\n\n/**\n *  intersectBezier2Bezier3\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} a3\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @param {Point2D} b3\n *  @param {Point2D} b4\n *  @returns {Intersection}\n */\nexport function intersectBezier2Bezier3(a1, a2, a3, b1, b2, b3, b4) {\n    var a, b,c, d;\n    var c12, c11, c10;\n    var c23, c22, c21, c20;\n    var result = new Intersection();\n\n    a = a2.multiply(-2);\n    c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    c11 = a.add(b);\n\n    c10 = new Point2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    c21 = new Vector2D(c.x, c.y);\n\n    c20 = new Vector2D(b1.x, b1.y);\n\n    var c10x2 = c10.x*c10.x;\n    var c10y2 = c10.y*c10.y;\n    var c11x2 = c11.x*c11.x;\n    var c11y2 = c11.y*c11.y;\n    var c12x2 = c12.x*c12.x;\n    var c12y2 = c12.y*c12.y;\n    var c20x2 = c20.x*c20.x;\n    var c20y2 = c20.y*c20.y;\n    var c21x2 = c21.x*c21.x;\n    var c21y2 = c21.y*c21.y;\n    var c22x2 = c22.x*c22.x;\n    var c22y2 = c22.y*c22.y;\n    var c23x2 = c23.x*c23.x;\n    var c23y2 = c23.y*c23.y;\n\n    var poly = new Polynomial(\n        -2*c12.x*c12.y*c23.x*c23.y + c12x2*c23y2 + c12y2*c23x2,\n        -2*c12.x*c12.y*c22.x*c23.y - 2*c12.x*c12.y*c22.y*c23.x + 2*c12y2*c22.x*c23.x +\n            2*c12x2*c22.y*c23.y,\n        -2*c12.x*c21.x*c12.y*c23.y - 2*c12.x*c12.y*c21.y*c23.x - 2*c12.x*c12.y*c22.x*c22.y +\n            2*c21.x*c12y2*c23.x + c12y2*c22x2 + c12x2*(2*c21.y*c23.y + c22y2),\n        2*c10.x*c12.x*c12.y*c23.y + 2*c10.y*c12.x*c12.y*c23.x + c11.x*c11.y*c12.x*c23.y +\n            c11.x*c11.y*c12.y*c23.x - 2*c20.x*c12.x*c12.y*c23.y - 2*c12.x*c20.y*c12.y*c23.x -\n            2*c12.x*c21.x*c12.y*c22.y - 2*c12.x*c12.y*c21.y*c22.x - 2*c10.x*c12y2*c23.x -\n            2*c10.y*c12x2*c23.y + 2*c20.x*c12y2*c23.x + 2*c21.x*c12y2*c22.x -\n            c11y2*c12.x*c23.x - c11x2*c12.y*c23.y + c12x2*(2*c20.y*c23.y + 2*c21.y*c22.y),\n        2*c10.x*c12.x*c12.y*c22.y + 2*c10.y*c12.x*c12.y*c22.x + c11.x*c11.y*c12.x*c22.y +\n            c11.x*c11.y*c12.y*c22.x - 2*c20.x*c12.x*c12.y*c22.y - 2*c12.x*c20.y*c12.y*c22.x -\n            2*c12.x*c21.x*c12.y*c21.y - 2*c10.x*c12y2*c22.x - 2*c10.y*c12x2*c22.y +\n            2*c20.x*c12y2*c22.x - c11y2*c12.x*c22.x - c11x2*c12.y*c22.y + c21x2*c12y2 +\n            c12x2*(2*c20.y*c22.y + c21y2),\n        2*c10.x*c12.x*c12.y*c21.y + 2*c10.y*c12.x*c21.x*c12.y + c11.x*c11.y*c12.x*c21.y +\n            c11.x*c11.y*c21.x*c12.y - 2*c20.x*c12.x*c12.y*c21.y - 2*c12.x*c20.y*c21.x*c12.y -\n            2*c10.x*c21.x*c12y2 - 2*c10.y*c12x2*c21.y + 2*c20.x*c21.x*c12y2 -\n            c11y2*c12.x*c21.x - c11x2*c12.y*c21.y + 2*c12x2*c20.y*c21.y,\n        -2*c10.x*c10.y*c12.x*c12.y - c10.x*c11.x*c11.y*c12.y - c10.y*c11.x*c11.y*c12.x +\n            2*c10.x*c12.x*c20.y*c12.y + 2*c10.y*c20.x*c12.x*c12.y + c11.x*c20.x*c11.y*c12.y +\n            c11.x*c11.y*c12.x*c20.y - 2*c20.x*c12.x*c20.y*c12.y - 2*c10.x*c20.x*c12y2 +\n            c10.x*c11y2*c12.x + c10.y*c11x2*c12.y - 2*c10.y*c12x2*c20.y -\n            c20.x*c11y2*c12.x - c11x2*c20.y*c12.y + c10x2*c12y2 + c10y2*c12x2 +\n            c20x2*c12y2 + c12x2*c20y2\n    );\n    var roots = poly.getRootsInInterval(0,1);\n    removeMultipleRootsIn01(roots);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n        var xRoots = new Polynomial(\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        var yRoots = new Polynomial(\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if ( xRoots.length > 0 && yRoots.length > 0 ) {\n            var TOLERANCE = 1e-4;\n\n            checkRoots:\n                for ( var j = 0; j < xRoots.length; j++ ) {\n                    var xRoot = xRoots[j];\n\n                    if ( 0 <= xRoot && xRoot <= 1 ) {\n                        for ( var k = 0; k < yRoots.length; k++ ) {\n                            if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                                var v = c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)));\n                                result.points.push(new Point2D(v.x, v.y));\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    return result;\n\n}\n\n/**\n *  intersectBezier2Ellipse\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} ec\n *  @param {Number} rx\n *  @param {Number} ry\n *  @returns {Intersection}\n */\nexport function intersectBezier2Ellipse(p1, p2, p3, ec, rx, ry) {\n    var a, b;       // temporary variables\n    var c2, c1, c0; // coefficients of quadratic\n    var result = new Intersection();\n\n    a = p2.multiply(-2);\n    c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    b = p2.multiply(2);\n    c1 = a.add(b);\n\n    c0 = new Point2D(p1.x, p1.y);\n\n    var rxrx  = rx*rx;\n    var ryry  = ry*ry;\n    var roots = new Polynomial(\n        ryry*c2.x*c2.x + rxrx*c2.y*c2.y,\n        2*(ryry*c2.x*c1.x + rxrx*c2.y*c1.y),\n        ryry*(2*c2.x*c0.x + c1.x*c1.x) + rxrx*(2*c2.y*c0.y+c1.y*c1.y) -\n            2*(ryry*ec.x*c2.x + rxrx*ec.y*c2.y),\n        2*(ryry*c1.x*(c0.x-ec.x) + rxrx*c1.y*(c0.y-ec.y)),\n        ryry*(c0.x*c0.x+ec.x*ec.x) + rxrx*(c0.y*c0.y + ec.y*ec.y) -\n            2*(ryry*ec.x*c0.x + rxrx*ec.y*c0.y) - rxrx*ryry\n    ).getRoots();\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 )\n            result.points.push( c2.multiply(t*t).add(c1.multiply(t).add(c0)) );\n    }\n\n    return result;\n}\n\n\n/**\n *  intersectBezier2Line\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @returns {Intersection}\n */\nexport function intersectBezier2Line(p1, p2, p3, a1, a2) {\n    var a, b;             // temporary variables\n    var c2, c1, c0;       // coefficients of quadratic\n    var cl;               // c coefficient for normal form of line\n    var n;                // normal for normal form of line\n    var min = a1.min(a2); // used to determine if point is on line segment\n    var max = a1.max(a2); // used to determine if point is on line segment\n    var result = new Intersection();\n\n    a = p2.multiply(-2);\n    c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    b = p2.multiply(2);\n    c1 = a.add(b);\n\n    c0 = new Point2D(p1.x, p1.y);\n\n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n    // Determine new c coefficient\n    cl = a1.x*a2.y - a2.x*a1.y;\n\n    // Transform cubic coefficients to line's coordinate system and find roots\n    // of cubic\n    var roots = new Polynomial(\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 ) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            var p4 = p1.lerp(p2, t);\n            var p5 = p2.lerp(p3, t);\n\n            var p6 = p4.lerp(p5, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p6\n            if ( a1.x == a2.x ) {\n                if ( min.y <= p6.y && p6.y <= max.y ) {\n                    result.appendPoint( p6 );\n                }\n            } else if ( a1.y == a2.y ) {\n                if ( min.x <= p6.x && p6.x <= max.x ) {\n                    result.appendPoint( p6 );\n                }\n            } else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {\n                result.appendPoint( p6 );\n            }\n        }\n    }\n\n    return result;\n}\n\n\n/**\n *  intersectBezier3Bezier3\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} a3\n *  @param {Point2D} a4\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @param {Point2D} b3\n *  @param {Point2D} b4\n *  @returns {Intersection}\n */\nexport function intersectBezier3Bezier3(a1, a2, a3, a4, b1, b2, b3, b4) {\n    var a, b, c, d;         // temporary variables\n    var c13, c12, c11, c10; // coefficients of cubic\n    var c23, c22, c21, c20; // coefficients of cubic\n    var result = new Intersection();\n\n    // Calculate the coefficients of cubic polynomial\n    a = a1.multiply(-1);\n    b = a2.multiply(3);\n    c = a3.multiply(-3);\n    d = a.add(b.add(c.add(a4)));\n    c13 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(3);\n    b = a2.multiply(-6);\n    c = a3.multiply(3);\n    d = a.add(b.add(c));\n    c12 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(-3);\n    b = a2.multiply(3);\n    c = a.add(b);\n    c11 = new Vector2D(c.x, c.y);\n\n    c10 = new Vector2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    c21 = new Vector2D(c.x, c.y);\n\n    c20 = new Vector2D(b1.x, b1.y);\n\n    var c10x2 = c10.x*c10.x;\n    var c10x3 = c10.x*c10.x*c10.x;\n    var c10y2 = c10.y*c10.y;\n    var c10y3 = c10.y*c10.y*c10.y;\n    var c11x2 = c11.x*c11.x;\n    var c11x3 = c11.x*c11.x*c11.x;\n    var c11y2 = c11.y*c11.y;\n    var c11y3 = c11.y*c11.y*c11.y;\n    var c12x2 = c12.x*c12.x;\n    var c12x3 = c12.x*c12.x*c12.x;\n    var c12y2 = c12.y*c12.y;\n    var c12y3 = c12.y*c12.y*c12.y;\n    var c13x2 = c13.x*c13.x;\n    var c13x3 = c13.x*c13.x*c13.x;\n    var c13y2 = c13.y*c13.y;\n    var c13y3 = c13.y*c13.y*c13.y;\n    var c20x2 = c20.x*c20.x;\n    var c20x3 = c20.x*c20.x*c20.x;\n    var c20y2 = c20.y*c20.y;\n    var c20y3 = c20.y*c20.y*c20.y;\n    var c21x2 = c21.x*c21.x;\n    var c21x3 = c21.x*c21.x*c21.x;\n    var c21y2 = c21.y*c21.y;\n    var c22x2 = c22.x*c22.x;\n    var c22x3 = c22.x*c22.x*c22.x;\n    var c22y2 = c22.y*c22.y;\n    var c23x2 = c23.x*c23.x;\n    var c23x3 = c23.x*c23.x*c23.x;\n    var c23y2 = c23.y*c23.y;\n    var c23y3 = c23.y*c23.y*c23.y;\n    var poly = new Polynomial(\n        -c13x3*c23y3 + c13y3*c23x3 - 3*c13.x*c13y2*c23x2*c23.y +\n            3*c13x2*c13.y*c23.x*c23y2,\n        -6*c13.x*c22.x*c13y2*c23.x*c23.y + 6*c13x2*c13.y*c22.y*c23.x*c23.y + 3*c22.x*c13y3*c23x2 -\n            3*c13x3*c22.y*c23y2 - 3*c13.x*c13y2*c22.y*c23x2 + 3*c13x2*c22.x*c13.y*c23y2,\n        -6*c21.x*c13.x*c13y2*c23.x*c23.y - 6*c13.x*c22.x*c13y2*c22.y*c23.x + 6*c13x2*c22.x*c13.y*c22.y*c23.y +\n            3*c21.x*c13y3*c23x2 + 3*c22x2*c13y3*c23.x + 3*c21.x*c13x2*c13.y*c23y2 - 3*c13.x*c21.y*c13y2*c23x2 -\n            3*c13.x*c22x2*c13y2*c23.y + c13x2*c13.y*c23.x*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-c21.y*c23y2 -\n            2*c22y2*c23.y - c23.y*(2*c21.y*c23.y + c22y2)),\n        c11.x*c12.y*c13.x*c13.y*c23.x*c23.y - c11.y*c12.x*c13.x*c13.y*c23.x*c23.y + 6*c21.x*c22.x*c13y3*c23.x +\n            3*c11.x*c12.x*c13.x*c13.y*c23y2 + 6*c10.x*c13.x*c13y2*c23.x*c23.y - 3*c11.x*c12.x*c13y2*c23.x*c23.y -\n            3*c11.y*c12.y*c13.x*c13.y*c23x2 - 6*c10.y*c13x2*c13.y*c23.x*c23.y - 6*c20.x*c13.x*c13y2*c23.x*c23.y +\n            3*c11.y*c12.y*c13x2*c23.x*c23.y - 2*c12.x*c12y2*c13.x*c23.x*c23.y - 6*c21.x*c13.x*c22.x*c13y2*c23.y -\n            6*c21.x*c13.x*c13y2*c22.y*c23.x - 6*c13.x*c21.y*c22.x*c13y2*c23.x + 6*c21.x*c13x2*c13.y*c22.y*c23.y +\n            2*c12x2*c12.y*c13.y*c23.x*c23.y + c22x3*c13y3 - 3*c10.x*c13y3*c23x2 + 3*c10.y*c13x3*c23y2 +\n            3*c20.x*c13y3*c23x2 + c12y3*c13.x*c23x2 - c12x3*c13.y*c23y2 - 3*c10.x*c13x2*c13.y*c23y2 +\n            3*c10.y*c13.x*c13y2*c23x2 - 2*c11.x*c12.y*c13x2*c23y2 + c11.x*c12.y*c13y2*c23x2 - c11.y*c12.x*c13x2*c23y2 +\n            2*c11.y*c12.x*c13y2*c23x2 + 3*c20.x*c13x2*c13.y*c23y2 - c12.x*c12y2*c13.y*c23x2 -\n            3*c20.y*c13.x*c13y2*c23x2 + c12x2*c12.y*c13.x*c23y2 - 3*c13.x*c22x2*c13y2*c22.y +\n            c13x2*c13.y*c23.x*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c22.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c13x3*(-2*c21.y*c22.y*c23.y - c20.y*c23y2 - c22.y*(2*c21.y*c23.y + c22y2) - c23.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        6*c11.x*c12.x*c13.x*c13.y*c22.y*c23.y + c11.x*c12.y*c13.x*c22.x*c13.y*c23.y + c11.x*c12.y*c13.x*c13.y*c22.y*c23.x -\n            c11.y*c12.x*c13.x*c22.x*c13.y*c23.y - c11.y*c12.x*c13.x*c13.y*c22.y*c23.x - 6*c11.y*c12.y*c13.x*c22.x*c13.y*c23.x -\n            6*c10.x*c22.x*c13y3*c23.x + 6*c20.x*c22.x*c13y3*c23.x + 6*c10.y*c13x3*c22.y*c23.y + 2*c12y3*c13.x*c22.x*c23.x -\n            2*c12x3*c13.y*c22.y*c23.y + 6*c10.x*c13.x*c22.x*c13y2*c23.y + 6*c10.x*c13.x*c13y2*c22.y*c23.x +\n            6*c10.y*c13.x*c22.x*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c23.y - 3*c11.x*c12.x*c13y2*c22.y*c23.x +\n            2*c11.x*c12.y*c22.x*c13y2*c23.x + 4*c11.y*c12.x*c22.x*c13y2*c23.x - 6*c10.x*c13x2*c13.y*c22.y*c23.y -\n            6*c10.y*c13x2*c22.x*c13.y*c23.y - 6*c10.y*c13x2*c13.y*c22.y*c23.x - 4*c11.x*c12.y*c13x2*c22.y*c23.y -\n            6*c20.x*c13.x*c22.x*c13y2*c23.y - 6*c20.x*c13.x*c13y2*c22.y*c23.x - 2*c11.y*c12.x*c13x2*c22.y*c23.y +\n            3*c11.y*c12.y*c13x2*c22.x*c23.y + 3*c11.y*c12.y*c13x2*c22.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c23.y -\n            2*c12.x*c12y2*c13.x*c22.y*c23.x - 2*c12.x*c12y2*c22.x*c13.y*c23.x - 6*c20.y*c13.x*c22.x*c13y2*c23.x -\n            6*c21.x*c13.x*c21.y*c13y2*c23.x - 6*c21.x*c13.x*c22.x*c13y2*c22.y + 6*c20.x*c13x2*c13.y*c22.y*c23.y +\n            2*c12x2*c12.y*c13.x*c22.y*c23.y + 2*c12x2*c12.y*c22.x*c13.y*c23.y + 2*c12x2*c12.y*c13.y*c22.y*c23.x +\n            3*c21.x*c22x2*c13y3 + 3*c21x2*c13y3*c23.x - 3*c13.x*c21.y*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c23.y +\n            c13x2*c22.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c13.y*c23.x*(6*c20.y*c22.y + 3*c21y2) +\n            c21.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-2*c20.y*c22.y*c23.y - c23.y*(2*c20.y*c22.y + c21y2) -\n            c21.y*(2*c21.y*c23.y + c22y2) - c22.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        c11.x*c21.x*c12.y*c13.x*c13.y*c23.y + c11.x*c12.y*c13.x*c21.y*c13.y*c23.x + c11.x*c12.y*c13.x*c22.x*c13.y*c22.y -\n            c11.y*c12.x*c21.x*c13.x*c13.y*c23.y - c11.y*c12.x*c13.x*c21.y*c13.y*c23.x - c11.y*c12.x*c13.x*c22.x*c13.y*c22.y -\n            6*c11.y*c21.x*c12.y*c13.x*c13.y*c23.x - 6*c10.x*c21.x*c13y3*c23.x + 6*c20.x*c21.x*c13y3*c23.x +\n            2*c21.x*c12y3*c13.x*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c23.y + 6*c10.x*c13.x*c21.y*c13y2*c23.x +\n            6*c10.x*c13.x*c22.x*c13y2*c22.y + 6*c10.y*c21.x*c13.x*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c23.y -\n            3*c11.x*c12.x*c21.y*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c22.y + 2*c11.x*c21.x*c12.y*c13y2*c23.x +\n            4*c11.y*c12.x*c21.x*c13y2*c23.x - 6*c10.y*c21.x*c13x2*c13.y*c23.y - 6*c10.y*c13x2*c21.y*c13.y*c23.x -\n            6*c10.y*c13x2*c22.x*c13.y*c22.y - 6*c20.x*c21.x*c13.x*c13y2*c23.y - 6*c20.x*c13.x*c21.y*c13y2*c23.x -\n            6*c20.x*c13.x*c22.x*c13y2*c22.y + 3*c11.y*c21.x*c12.y*c13x2*c23.y - 3*c11.y*c12.y*c13.x*c22x2*c13.y +\n            3*c11.y*c12.y*c13x2*c21.y*c23.x + 3*c11.y*c12.y*c13x2*c22.x*c22.y - 2*c12.x*c21.x*c12y2*c13.x*c23.y -\n            2*c12.x*c21.x*c12y2*c13.y*c23.x - 2*c12.x*c12y2*c13.x*c21.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c22.y -\n            6*c20.y*c21.x*c13.x*c13y2*c23.x - 6*c21.x*c13.x*c21.y*c22.x*c13y2 + 6*c20.y*c13x2*c21.y*c13.y*c23.x +\n            2*c12x2*c21.x*c12.y*c13.y*c23.y + 2*c12x2*c12.y*c21.y*c13.y*c23.x + 2*c12x2*c12.y*c22.x*c13.y*c22.y -\n            3*c10.x*c22x2*c13y3 + 3*c20.x*c22x2*c13y3 + 3*c21x2*c22.x*c13y3 + c12y3*c13.x*c22x2 +\n            3*c10.y*c13.x*c22x2*c13y2 + c11.x*c12.y*c22x2*c13y2 + 2*c11.y*c12.x*c22x2*c13y2 -\n            c12.x*c12y2*c22x2*c13.y - 3*c20.y*c13.x*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c22.y +\n            c12x2*c12.y*c13.x*(2*c21.y*c23.y + c22y2) + c11.x*c12.x*c13.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c21.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c21.y*c23.y - c22y2) +\n            c10.y*c13x3*(6*c21.y*c23.y + 3*c22y2) + c11.y*c12.x*c13x2*(-2*c21.y*c23.y - c22y2) +\n            c11.x*c12.y*c13x2*(-4*c21.y*c23.y - 2*c22y2) + c10.x*c13x2*c13.y*(-6*c21.y*c23.y - 3*c22y2) +\n            c13x2*c22.x*c13.y*(6*c20.y*c22.y + 3*c21y2) + c20.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c13x3*(-2*c20.y*c21.y*c23.y - c22.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c21.y*c23.y + c22y2) -\n            c21.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        -c10.x*c11.x*c12.y*c13.x*c13.y*c23.y + c10.x*c11.y*c12.x*c13.x*c13.y*c23.y + 6*c10.x*c11.y*c12.y*c13.x*c13.y*c23.x -\n            6*c10.y*c11.x*c12.x*c13.x*c13.y*c23.y - c10.y*c11.x*c12.y*c13.x*c13.y*c23.x + c10.y*c11.y*c12.x*c13.x*c13.y*c23.x +\n            c11.x*c11.y*c12.x*c12.y*c13.x*c23.y - c11.x*c11.y*c12.x*c12.y*c13.y*c23.x + c11.x*c20.x*c12.y*c13.x*c13.y*c23.y +\n            c11.x*c20.y*c12.y*c13.x*c13.y*c23.x + c11.x*c21.x*c12.y*c13.x*c13.y*c22.y + c11.x*c12.y*c13.x*c21.y*c22.x*c13.y -\n            c20.x*c11.y*c12.x*c13.x*c13.y*c23.y - 6*c20.x*c11.y*c12.y*c13.x*c13.y*c23.x - c11.y*c12.x*c20.y*c13.x*c13.y*c23.x -\n            c11.y*c12.x*c21.x*c13.x*c13.y*c22.y - c11.y*c12.x*c13.x*c21.y*c22.x*c13.y - 6*c11.y*c21.x*c12.y*c13.x*c22.x*c13.y -\n            6*c10.x*c20.x*c13y3*c23.x - 6*c10.x*c21.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c23.x + 6*c20.x*c21.x*c22.x*c13y3 +\n            2*c20.x*c12y3*c13.x*c23.x + 2*c21.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c23.y - 6*c10.x*c10.y*c13.x*c13y2*c23.x +\n            3*c10.x*c11.x*c12.x*c13y2*c23.y - 2*c10.x*c11.x*c12.y*c13y2*c23.x - 4*c10.x*c11.y*c12.x*c13y2*c23.x +\n            3*c10.y*c11.x*c12.x*c13y2*c23.x + 6*c10.x*c10.y*c13x2*c13.y*c23.y + 6*c10.x*c20.x*c13.x*c13y2*c23.y -\n            3*c10.x*c11.y*c12.y*c13x2*c23.y + 2*c10.x*c12.x*c12y2*c13.x*c23.y + 2*c10.x*c12.x*c12y2*c13.y*c23.x +\n            6*c10.x*c20.y*c13.x*c13y2*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c22.y + 6*c10.x*c13.x*c21.y*c22.x*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c23.y + 6*c10.y*c20.x*c13.x*c13y2*c23.x + 2*c10.y*c11.y*c12.x*c13x2*c23.y -\n            3*c10.y*c11.y*c12.y*c13x2*c23.x + 2*c10.y*c12.x*c12y2*c13.x*c23.x + 6*c10.y*c21.x*c13.x*c22.x*c13y2 -\n            3*c11.x*c20.x*c12.x*c13y2*c23.y + 2*c11.x*c20.x*c12.y*c13y2*c23.x + c11.x*c11.y*c12y2*c13.x*c23.x -\n            3*c11.x*c12.x*c20.y*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c22.y - 3*c11.x*c12.x*c21.y*c22.x*c13y2 +\n            2*c11.x*c21.x*c12.y*c22.x*c13y2 + 4*c20.x*c11.y*c12.x*c13y2*c23.x + 4*c11.y*c12.x*c21.x*c22.x*c13y2 -\n            2*c10.x*c12x2*c12.y*c13.y*c23.y - 6*c10.y*c20.x*c13x2*c13.y*c23.y - 6*c10.y*c20.y*c13x2*c13.y*c23.x -\n            6*c10.y*c21.x*c13x2*c13.y*c22.y - 2*c10.y*c12x2*c12.y*c13.x*c23.y - 2*c10.y*c12x2*c12.y*c13.y*c23.x -\n            6*c10.y*c13x2*c21.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c23.y - 2*c11.x*c11y2*c13.x*c13.y*c23.x +\n            3*c20.x*c11.y*c12.y*c13x2*c23.y - 2*c20.x*c12.x*c12y2*c13.x*c23.y - 2*c20.x*c12.x*c12y2*c13.y*c23.x -\n            6*c20.x*c20.y*c13.x*c13y2*c23.x - 6*c20.x*c21.x*c13.x*c13y2*c22.y - 6*c20.x*c13.x*c21.y*c22.x*c13y2 +\n            3*c11.y*c20.y*c12.y*c13x2*c23.x + 3*c11.y*c21.x*c12.y*c13x2*c22.y + 3*c11.y*c12.y*c13x2*c21.y*c22.x -\n            2*c12.x*c20.y*c12y2*c13.x*c23.x - 2*c12.x*c21.x*c12y2*c13.x*c22.y - 2*c12.x*c21.x*c12y2*c22.x*c13.y -\n            2*c12.x*c12y2*c13.x*c21.y*c22.x - 6*c20.y*c21.x*c13.x*c22.x*c13y2 - c11y2*c12.x*c12.y*c13.x*c23.x +\n            2*c20.x*c12x2*c12.y*c13.y*c23.y + 6*c20.y*c13x2*c21.y*c22.x*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c23.y +\n            c11x2*c12.x*c12.y*c13.y*c23.y + 2*c12x2*c20.y*c12.y*c13.y*c23.x + 2*c12x2*c21.x*c12.y*c13.y*c22.y +\n            2*c12x2*c12.y*c21.y*c22.x*c13.y + c21x3*c13y3 + 3*c10x2*c13y3*c23.x - 3*c10y2*c13x3*c23.y +\n            3*c20x2*c13y3*c23.x + c11y3*c13x2*c23.x - c11x3*c13y2*c23.y - c11.x*c11y2*c13x2*c23.y +\n            c11x2*c11.y*c13y2*c23.x - 3*c10x2*c13.x*c13y2*c23.y + 3*c10y2*c13x2*c13.y*c23.x - c11x2*c12y2*c13.x*c23.y +\n            c11y2*c12x2*c13.y*c23.x - 3*c21x2*c13.x*c21.y*c13y2 - 3*c20x2*c13.x*c13y2*c23.y + 3*c20y2*c13x2*c13.y*c23.x +\n            c11.x*c12.x*c13.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c20.y*c23.y - 2*c21.y*c22.y) +\n            c10.y*c13x3*(6*c20.y*c23.y + 6*c21.y*c22.y) + c11.y*c12.x*c13x2*(-2*c20.y*c23.y - 2*c21.y*c22.y) +\n            c12x2*c12.y*c13.x*(2*c20.y*c23.y + 2*c21.y*c22.y) + c11.x*c12.y*c13x2*(-4*c20.y*c23.y - 4*c21.y*c22.y) +\n            c10.x*c13x2*c13.y*(-6*c20.y*c23.y - 6*c21.y*c22.y) + c20.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) +\n            c21.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) + c13x3*(-2*c20.y*c21.y*c22.y - c20y2*c23.y -\n            c21.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        -c10.x*c11.x*c12.y*c13.x*c13.y*c22.y + c10.x*c11.y*c12.x*c13.x*c13.y*c22.y + 6*c10.x*c11.y*c12.y*c13.x*c22.x*c13.y -\n            6*c10.y*c11.x*c12.x*c13.x*c13.y*c22.y - c10.y*c11.x*c12.y*c13.x*c22.x*c13.y + c10.y*c11.y*c12.x*c13.x*c22.x*c13.y +\n            c11.x*c11.y*c12.x*c12.y*c13.x*c22.y - c11.x*c11.y*c12.x*c12.y*c22.x*c13.y + c11.x*c20.x*c12.y*c13.x*c13.y*c22.y +\n            c11.x*c20.y*c12.y*c13.x*c22.x*c13.y + c11.x*c21.x*c12.y*c13.x*c21.y*c13.y - c20.x*c11.y*c12.x*c13.x*c13.y*c22.y -\n            6*c20.x*c11.y*c12.y*c13.x*c22.x*c13.y - c11.y*c12.x*c20.y*c13.x*c22.x*c13.y - c11.y*c12.x*c21.x*c13.x*c21.y*c13.y -\n            6*c10.x*c20.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c22.x + 2*c20.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c22.y -\n            6*c10.x*c10.y*c13.x*c22.x*c13y2 + 3*c10.x*c11.x*c12.x*c13y2*c22.y - 2*c10.x*c11.x*c12.y*c22.x*c13y2 -\n            4*c10.x*c11.y*c12.x*c22.x*c13y2 + 3*c10.y*c11.x*c12.x*c22.x*c13y2 + 6*c10.x*c10.y*c13x2*c13.y*c22.y +\n            6*c10.x*c20.x*c13.x*c13y2*c22.y - 3*c10.x*c11.y*c12.y*c13x2*c22.y + 2*c10.x*c12.x*c12y2*c13.x*c22.y +\n            2*c10.x*c12.x*c12y2*c22.x*c13.y + 6*c10.x*c20.y*c13.x*c22.x*c13y2 + 6*c10.x*c21.x*c13.x*c21.y*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c22.y + 6*c10.y*c20.x*c13.x*c22.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c22.y -\n            3*c10.y*c11.y*c12.y*c13x2*c22.x + 2*c10.y*c12.x*c12y2*c13.x*c22.x - 3*c11.x*c20.x*c12.x*c13y2*c22.y +\n            2*c11.x*c20.x*c12.y*c22.x*c13y2 + c11.x*c11.y*c12y2*c13.x*c22.x - 3*c11.x*c12.x*c20.y*c22.x*c13y2 -\n            3*c11.x*c12.x*c21.x*c21.y*c13y2 + 4*c20.x*c11.y*c12.x*c22.x*c13y2 - 2*c10.x*c12x2*c12.y*c13.y*c22.y -\n            6*c10.y*c20.x*c13x2*c13.y*c22.y - 6*c10.y*c20.y*c13x2*c22.x*c13.y - 6*c10.y*c21.x*c13x2*c21.y*c13.y -\n            2*c10.y*c12x2*c12.y*c13.x*c22.y - 2*c10.y*c12x2*c12.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c22.y -\n            2*c11.x*c11y2*c13.x*c22.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c22.y - 2*c20.x*c12.x*c12y2*c13.x*c22.y -\n            2*c20.x*c12.x*c12y2*c22.x*c13.y - 6*c20.x*c20.y*c13.x*c22.x*c13y2 - 6*c20.x*c21.x*c13.x*c21.y*c13y2 +\n            3*c11.y*c20.y*c12.y*c13x2*c22.x + 3*c11.y*c21.x*c12.y*c13x2*c21.y - 2*c12.x*c20.y*c12y2*c13.x*c22.x -\n            2*c12.x*c21.x*c12y2*c13.x*c21.y - c11y2*c12.x*c12.y*c13.x*c22.x + 2*c20.x*c12x2*c12.y*c13.y*c22.y -\n            3*c11.y*c21x2*c12.y*c13.x*c13.y + 6*c20.y*c21.x*c13x2*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c22.y +\n            c11x2*c12.x*c12.y*c13.y*c22.y + 2*c12x2*c20.y*c12.y*c22.x*c13.y + 2*c12x2*c21.x*c12.y*c21.y*c13.y -\n            3*c10.x*c21x2*c13y3 + 3*c20.x*c21x2*c13y3 + 3*c10x2*c22.x*c13y3 - 3*c10y2*c13x3*c22.y + 3*c20x2*c22.x*c13y3 +\n            c21x2*c12y3*c13.x + c11y3*c13x2*c22.x - c11x3*c13y2*c22.y + 3*c10.y*c21x2*c13.x*c13y2 -\n            c11.x*c11y2*c13x2*c22.y + c11.x*c21x2*c12.y*c13y2 + 2*c11.y*c12.x*c21x2*c13y2 + c11x2*c11.y*c22.x*c13y2 -\n            c12.x*c21x2*c12y2*c13.y - 3*c20.y*c21x2*c13.x*c13y2 - 3*c10x2*c13.x*c13y2*c22.y + 3*c10y2*c13x2*c22.x*c13.y -\n            c11x2*c12y2*c13.x*c22.y + c11y2*c12x2*c22.x*c13.y - 3*c20x2*c13.x*c13y2*c22.y + 3*c20y2*c13x2*c22.x*c13.y +\n            c12x2*c12.y*c13.x*(2*c20.y*c22.y + c21y2) + c11.x*c12.x*c13.x*c13.y*(6*c20.y*c22.y + 3*c21y2) +\n            c12x3*c13.y*(-2*c20.y*c22.y - c21y2) + c10.y*c13x3*(6*c20.y*c22.y + 3*c21y2) +\n            c11.y*c12.x*c13x2*(-2*c20.y*c22.y - c21y2) + c11.x*c12.y*c13x2*(-4*c20.y*c22.y - 2*c21y2) +\n            c10.x*c13x2*c13.y*(-6*c20.y*c22.y - 3*c21y2) + c20.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) +\n            c13x3*(-2*c20.y*c21y2 - c20y2*c22.y - c20.y*(2*c20.y*c22.y + c21y2)),\n        -c10.x*c11.x*c12.y*c13.x*c21.y*c13.y + c10.x*c11.y*c12.x*c13.x*c21.y*c13.y + 6*c10.x*c11.y*c21.x*c12.y*c13.x*c13.y -\n            6*c10.y*c11.x*c12.x*c13.x*c21.y*c13.y - c10.y*c11.x*c21.x*c12.y*c13.x*c13.y + c10.y*c11.y*c12.x*c21.x*c13.x*c13.y -\n            c11.x*c11.y*c12.x*c21.x*c12.y*c13.y + c11.x*c11.y*c12.x*c12.y*c13.x*c21.y + c11.x*c20.x*c12.y*c13.x*c21.y*c13.y +\n            6*c11.x*c12.x*c20.y*c13.x*c21.y*c13.y + c11.x*c20.y*c21.x*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c13.x*c21.y*c13.y -\n            6*c20.x*c11.y*c21.x*c12.y*c13.x*c13.y - c11.y*c12.x*c20.y*c21.x*c13.x*c13.y - 6*c10.x*c20.x*c21.x*c13y3 -\n            2*c10.x*c21.x*c12y3*c13.x + 6*c10.y*c20.y*c13x3*c21.y + 2*c20.x*c21.x*c12y3*c13.x + 2*c10.y*c12x3*c21.y*c13.y -\n            2*c12x3*c20.y*c21.y*c13.y - 6*c10.x*c10.y*c21.x*c13.x*c13y2 + 3*c10.x*c11.x*c12.x*c21.y*c13y2 -\n            2*c10.x*c11.x*c21.x*c12.y*c13y2 - 4*c10.x*c11.y*c12.x*c21.x*c13y2 + 3*c10.y*c11.x*c12.x*c21.x*c13y2 +\n            6*c10.x*c10.y*c13x2*c21.y*c13.y + 6*c10.x*c20.x*c13.x*c21.y*c13y2 - 3*c10.x*c11.y*c12.y*c13x2*c21.y +\n            2*c10.x*c12.x*c21.x*c12y2*c13.y + 2*c10.x*c12.x*c12y2*c13.x*c21.y + 6*c10.x*c20.y*c21.x*c13.x*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c21.y + 6*c10.y*c20.x*c21.x*c13.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c21.y -\n            3*c10.y*c11.y*c21.x*c12.y*c13x2 + 2*c10.y*c12.x*c21.x*c12y2*c13.x - 3*c11.x*c20.x*c12.x*c21.y*c13y2 +\n            2*c11.x*c20.x*c21.x*c12.y*c13y2 + c11.x*c11.y*c21.x*c12y2*c13.x - 3*c11.x*c12.x*c20.y*c21.x*c13y2 +\n            4*c20.x*c11.y*c12.x*c21.x*c13y2 - 6*c10.x*c20.y*c13x2*c21.y*c13.y - 2*c10.x*c12x2*c12.y*c21.y*c13.y -\n            6*c10.y*c20.x*c13x2*c21.y*c13.y - 6*c10.y*c20.y*c21.x*c13x2*c13.y - 2*c10.y*c12x2*c21.x*c12.y*c13.y -\n            2*c10.y*c12x2*c12.y*c13.x*c21.y - c11.x*c11.y*c12x2*c21.y*c13.y - 4*c11.x*c20.y*c12.y*c13x2*c21.y -\n            2*c11.x*c11y2*c21.x*c13.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c21.y - 2*c20.x*c12.x*c21.x*c12y2*c13.y -\n            2*c20.x*c12.x*c12y2*c13.x*c21.y - 6*c20.x*c20.y*c21.x*c13.x*c13y2 - 2*c11.y*c12.x*c20.y*c13x2*c21.y +\n            3*c11.y*c20.y*c21.x*c12.y*c13x2 - 2*c12.x*c20.y*c21.x*c12y2*c13.x - c11y2*c12.x*c21.x*c12.y*c13.x +\n            6*c20.x*c20.y*c13x2*c21.y*c13.y + 2*c20.x*c12x2*c12.y*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c21.y*c13.y +\n            c11x2*c12.x*c12.y*c21.y*c13.y + 2*c12x2*c20.y*c21.x*c12.y*c13.y + 2*c12x2*c20.y*c12.y*c13.x*c21.y +\n            3*c10x2*c21.x*c13y3 - 3*c10y2*c13x3*c21.y + 3*c20x2*c21.x*c13y3 + c11y3*c21.x*c13x2 - c11x3*c21.y*c13y2 -\n            3*c20y2*c13x3*c21.y - c11.x*c11y2*c13x2*c21.y + c11x2*c11.y*c21.x*c13y2 - 3*c10x2*c13.x*c21.y*c13y2 +\n            3*c10y2*c21.x*c13x2*c13.y - c11x2*c12y2*c13.x*c21.y + c11y2*c12x2*c21.x*c13.y - 3*c20x2*c13.x*c21.y*c13y2 +\n            3*c20y2*c21.x*c13x2*c13.y,\n        c10.x*c10.y*c11.x*c12.y*c13.x*c13.y - c10.x*c10.y*c11.y*c12.x*c13.x*c13.y + c10.x*c11.x*c11.y*c12.x*c12.y*c13.y -\n            c10.y*c11.x*c11.y*c12.x*c12.y*c13.x - c10.x*c11.x*c20.y*c12.y*c13.x*c13.y + 6*c10.x*c20.x*c11.y*c12.y*c13.x*c13.y +\n            c10.x*c11.y*c12.x*c20.y*c13.x*c13.y - c10.y*c11.x*c20.x*c12.y*c13.x*c13.y - 6*c10.y*c11.x*c12.x*c20.y*c13.x*c13.y +\n            c10.y*c20.x*c11.y*c12.x*c13.x*c13.y - c11.x*c20.x*c11.y*c12.x*c12.y*c13.y + c11.x*c11.y*c12.x*c20.y*c12.y*c13.x +\n            c11.x*c20.x*c20.y*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c20.y*c13.x*c13.y - 2*c10.x*c20.x*c12y3*c13.x +\n            2*c10.y*c12x3*c20.y*c13.y - 3*c10.x*c10.y*c11.x*c12.x*c13y2 - 6*c10.x*c10.y*c20.x*c13.x*c13y2 +\n            3*c10.x*c10.y*c11.y*c12.y*c13x2 - 2*c10.x*c10.y*c12.x*c12y2*c13.x - 2*c10.x*c11.x*c20.x*c12.y*c13y2 -\n            c10.x*c11.x*c11.y*c12y2*c13.x + 3*c10.x*c11.x*c12.x*c20.y*c13y2 - 4*c10.x*c20.x*c11.y*c12.x*c13y2 +\n            3*c10.y*c11.x*c20.x*c12.x*c13y2 + 6*c10.x*c10.y*c20.y*c13x2*c13.y + 2*c10.x*c10.y*c12x2*c12.y*c13.y +\n            2*c10.x*c11.x*c11y2*c13.x*c13.y + 2*c10.x*c20.x*c12.x*c12y2*c13.y + 6*c10.x*c20.x*c20.y*c13.x*c13y2 -\n            3*c10.x*c11.y*c20.y*c12.y*c13x2 + 2*c10.x*c12.x*c20.y*c12y2*c13.x + c10.x*c11y2*c12.x*c12.y*c13.x +\n            c10.y*c11.x*c11.y*c12x2*c13.y + 4*c10.y*c11.x*c20.y*c12.y*c13x2 - 3*c10.y*c20.x*c11.y*c12.y*c13x2 +\n            2*c10.y*c20.x*c12.x*c12y2*c13.x + 2*c10.y*c11.y*c12.x*c20.y*c13x2 + c11.x*c20.x*c11.y*c12y2*c13.x -\n            3*c11.x*c20.x*c12.x*c20.y*c13y2 - 2*c10.x*c12x2*c20.y*c12.y*c13.y - 6*c10.y*c20.x*c20.y*c13x2*c13.y -\n            2*c10.y*c20.x*c12x2*c12.y*c13.y - 2*c10.y*c11x2*c11.y*c13.x*c13.y - c10.y*c11x2*c12.x*c12.y*c13.y -\n            2*c10.y*c12x2*c20.y*c12.y*c13.x - 2*c11.x*c20.x*c11y2*c13.x*c13.y - c11.x*c11.y*c12x2*c20.y*c13.y +\n            3*c20.x*c11.y*c20.y*c12.y*c13x2 - 2*c20.x*c12.x*c20.y*c12y2*c13.x - c20.x*c11y2*c12.x*c12.y*c13.x +\n            3*c10y2*c11.x*c12.x*c13.x*c13.y + 3*c11.x*c12.x*c20y2*c13.x*c13.y + 2*c20.x*c12x2*c20.y*c12.y*c13.y -\n            3*c10x2*c11.y*c12.y*c13.x*c13.y + 2*c11x2*c11.y*c20.y*c13.x*c13.y + c11x2*c12.x*c20.y*c12.y*c13.y -\n            3*c20x2*c11.y*c12.y*c13.x*c13.y - c10x3*c13y3 + c10y3*c13x3 + c20x3*c13y3 - c20y3*c13x3 -\n            3*c10.x*c20x2*c13y3 - c10.x*c11y3*c13x2 + 3*c10x2*c20.x*c13y3 + c10.y*c11x3*c13y2 +\n            3*c10.y*c20y2*c13x3 + c20.x*c11y3*c13x2 + c10x2*c12y3*c13.x - 3*c10y2*c20.y*c13x3 - c10y2*c12x3*c13.y +\n            c20x2*c12y3*c13.x - c11x3*c20.y*c13y2 - c12x3*c20y2*c13.y - c10.x*c11x2*c11.y*c13y2 +\n            c10.y*c11.x*c11y2*c13x2 - 3*c10.x*c10y2*c13x2*c13.y - c10.x*c11y2*c12x2*c13.y + c10.y*c11x2*c12y2*c13.x -\n            c11.x*c11y2*c20.y*c13x2 + 3*c10x2*c10.y*c13.x*c13y2 + c10x2*c11.x*c12.y*c13y2 +\n            2*c10x2*c11.y*c12.x*c13y2 - 2*c10y2*c11.x*c12.y*c13x2 - c10y2*c11.y*c12.x*c13x2 + c11x2*c20.x*c11.y*c13y2 -\n            3*c10.x*c20y2*c13x2*c13.y + 3*c10.y*c20x2*c13.x*c13y2 + c11.x*c20x2*c12.y*c13y2 - 2*c11.x*c20y2*c12.y*c13x2 +\n            c20.x*c11y2*c12x2*c13.y - c11.y*c12.x*c20y2*c13x2 - c10x2*c12.x*c12y2*c13.y - 3*c10x2*c20.y*c13.x*c13y2 +\n            3*c10y2*c20.x*c13x2*c13.y + c10y2*c12x2*c12.y*c13.x - c11x2*c20.y*c12y2*c13.x + 2*c20x2*c11.y*c12.x*c13y2 +\n            3*c20.x*c20y2*c13x2*c13.y - c20x2*c12.x*c12y2*c13.y - 3*c20x2*c20.y*c13.x*c13y2 + c12x2*c20y2*c12.y*c13.x\n    );\n    var roots = poly.getRootsInInterval(0,1);\n    removeMultipleRootsIn01(roots);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n        var xRoots = new Polynomial(\n            c13.x,\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        var yRoots = new Polynomial(\n            c13.y,\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if ( xRoots.length > 0 && yRoots.length > 0 ) {\n            var TOLERANCE = 1e-4;\n\n            checkRoots:\n                for ( var j = 0; j < xRoots.length; j++ ) {\n                    var xRoot = xRoots[j];\n\n                    if ( 0 <= xRoot && xRoot <= 1 ) {\n                        for ( var k = 0; k < yRoots.length; k++ ) {\n                            if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                                var v = c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)));\n                                result.points.push(new Point2D(v.x, v.y));\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n        }\n    }\n\n    return result;\n}\n\n/**\n *  intersectBezier3Ellipse\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Point2D} ec\n *  @param {Number} rx\n *  @param {Number} ry\n *  @returns {Intersection}\n */\nexport function intersectBezier3Ellipse(p1, p2, p3, p4, ec, rx, ry) {\n    var a, b, c, d;       // temporary variables\n    var c3, c2, c1, c0;   // coefficients of cubic\n    var result = new Intersection();\n\n    // Calculate the coefficients of cubic polynomial\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    c1 = new Vector2D(c.x, c.y);\n\n    c0 = new Vector2D(p1.x, p1.y);\n\n    var rxrx  = rx*rx;\n    var ryry  = ry*ry;\n    var poly = new Polynomial(\n        c3.x*c3.x*ryry + c3.y*c3.y*rxrx,\n        2*(c3.x*c2.x*ryry + c3.y*c2.y*rxrx),\n        2*(c3.x*c1.x*ryry + c3.y*c1.y*rxrx) + c2.x*c2.x*ryry + c2.y*c2.y*rxrx,\n        2*c3.x*ryry*(c0.x - ec.x) + 2*c3.y*rxrx*(c0.y - ec.y) +\n            2*(c2.x*c1.x*ryry + c2.y*c1.y*rxrx),\n        2*c2.x*ryry*(c0.x - ec.x) + 2*c2.y*rxrx*(c0.y - ec.y) +\n            c1.x*c1.x*ryry + c1.y*c1.y*rxrx,\n        2*c1.x*ryry*(c0.x - ec.x) + 2*c1.y*rxrx*(c0.y - ec.y),\n        c0.x*c0.x*ryry - 2*c0.y*ec.y*rxrx - 2*c0.x*ec.x*ryry +\n            c0.y*c0.y*rxrx + ec.x*ec.x*ryry + ec.y*ec.y*rxrx - rxrx*ryry\n    );\n    var roots = poly.getRootsInInterval(0,1);\n    removeMultipleRootsIn01(roots);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n        var v = c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)));\n        result.points.push(new Point2D(v.x, v.y));\n    }\n\n    return result;\n}\n\n\n/**\n *  intersectBezier3Line\n *\n *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n *  sketch of the algorithm used here.  Without his help, I'm not sure when I\n *  would have figured out this intersection problem.\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @returns {Intersection}\n */\nexport function intersectBezier3Line(p1, p2, p3, p4, a1, a2) {\n    var a, b, c, d;       // temporary variables\n    var c3, c2, c1, c0;   // coefficients of cubic\n    var cl;               // c coefficient for normal form of line\n    var n;                // normal for normal form of line\n    var min = a1.min(a2); // used to determine if point is on line segment\n    var max = a1.max(a2); // used to determine if point is on line segment\n    var result = new Intersection();\n\n    // Start with Bezier using Bernstein polynomials for weighting functions:\n    //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n    //\n    // Expand and collect terms to form linear combinations of original Bezier\n    // controls.  This ends up with a vector cubic in t:\n    //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n    //             /\\                  /\\                /\\       /\\\n    //             ||                  ||                ||       ||\n    //             c3                  c2                c1       c0\n\n    // Calculate the coefficients\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    c1 = new Vector2D(c.x, c.y);\n\n    c0 = new Vector2D(p1.x, p1.y);\n\n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n    // Determine new c coefficient\n    cl = a1.x*a2.y - a2.x*a1.y;\n\n    // ?Rotate each cubic coefficient using line for new coordinate system?\n    // Find roots of rotated cubic\n    var roots = new Polynomial(\n        n.dot(c3),\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 ) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            var p5 = p1.lerp(p2, t);\n            var p6 = p2.lerp(p3, t);\n            var p7 = p3.lerp(p4, t);\n\n            var p8 = p5.lerp(p6, t);\n            var p9 = p6.lerp(p7, t);\n\n            var p10 = p8.lerp(p9, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p10\n            if ( a1.x == a2.x ) {\n                if ( min.y <= p10.y && p10.y <= max.y ) {\n                    result.appendPoint( p10 );\n                }\n            } else if ( a1.y == a2.y ) {\n                if ( min.x <= p10.x && p10.x <= max.x ) {\n                    result.appendPoint( p10 );\n                }\n            } else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {\n                result.appendPoint( p10 );\n            }\n        }\n    }\n\n    return result;\n}\n","/**\n *\n *  Intersection.js\n *\n *  copyright 2002, 2013 Kevin Lindsey\n *\n *  contribution {@link http://github.com/Quazistax/kld-intersections}\n *      @copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com>\n *      @license MIT\n */\n\nimport {Point2D, Vector2D, Matrix2D} from 'kld-affine';\nimport {Polynomial} from 'kld-polynomial';\nimport IntersectionParams from './IntersectionParams';\nimport Intersection from './Intersection';\nimport {\n  intersectBezier2Bezier2, intersectBezier2Bezier3, intersectBezier2Ellipse,\n  intersectBezier2Line, intersectBezier3Bezier3, intersectBezier3Ellipse,\n  intersectBezier3Line\n} from './functions/bezier';\n\nvar bezierIntersectionFunctions = {\n  intersectBezier2Bezier2, intersectBezier2Bezier3, intersectBezier2Ellipse,\n  intersectBezier2Line, intersectBezier3Bezier3, intersectBezier3Ellipse,\n  intersectBezier3Line\n};\n\nvar IPTYPE = IntersectionParams.TYPE;\n\n\n\n/**\n *  bezout\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.geometrictools.com\n *\n *  @param {Array<Point2D>} e1\n *  @param {Array<Point2D>} e2\n *  @returns {Polynomial}\n */\nfunction bezout(e1, e2) {\n    var AB    = e1[0]*e2[1] - e2[0]*e1[1];\n    var AC    = e1[0]*e2[2] - e2[0]*e1[2];\n    var AD    = e1[0]*e2[3] - e2[0]*e1[3];\n    var AE    = e1[0]*e2[4] - e2[0]*e1[4];\n    var AF    = e1[0]*e2[5] - e2[0]*e1[5];\n    var BC    = e1[1]*e2[2] - e2[1]*e1[2];\n    var BE    = e1[1]*e2[4] - e2[1]*e1[4];\n    var BF    = e1[1]*e2[5] - e2[1]*e1[5];\n    var CD    = e1[2]*e2[3] - e2[2]*e1[3];\n    var DE    = e1[3]*e2[4] - e2[3]*e1[4];\n    var DF    = e1[3]*e2[5] - e2[3]*e1[5];\n    var BFpDE = BF + DE;\n    var BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB*BC - AC*AC,\n        AB*BEmCD + AD*BC - 2*AC*AE,\n        AB*BFpDE + AD*BEmCD - AE*AE - 2*AC*AF,\n        AB*DF + AD*BFpDE - 2*AE*AF,\n        AD*DF - AF*AF\n    );\n}\n\n/**\n    Removes from intersection points those points that are not between two rays determined by arc parameters.\n    Rays begin at ellipse center and go through arc startPoint/endPoint.\n\n    @param {Intersection} intersection - will be modified and returned\n    @param {Point2D} c - center of arc ellipse\n    @param {Number} rx\n    @param {Number} ry\n    @param {Number} phi - in radians\n    @param {Number} th1 - in radians\n    @param {Number} dth - in radians\n    @param {Matrix2D} [m] - arc transformation matrix\n    @returns {Intersection}\n*/\nfunction removePointsNotInArc(intersection, c, rx, ry, phi, th1, dth, m) {\n    if (intersection.points.length === 0) return intersection;\n    if (m && !m.isIdentity())\n        var mp = m.inverse();\n    var np = [];\n    var vx = new Vector2D(1, 0);\n    var pi2 = Math.PI * 2;\n    var wasNeg = dth < 0;\n    var wasBig = Math.abs(dth) > Math.PI;\n    var m1 = new Matrix2D().scaleNonUniform(1, ry / rx).rotate(th1);\n    var m2 = new Matrix2D().scaleNonUniform(1, ry / rx).rotate(th1 + dth);\n\n    th1 = (vx.angleBetween(vx.transform(m1)) + pi2) % pi2;\n    dth = vx.transform(m1).angleBetween(vx.transform(m2));\n    dth = (wasBig ? pi2 - Math.abs(dth) : Math.abs(dth)) * (wasNeg ? -1 : 1);\n    var m3 = new Matrix2D().rotate(phi).multiply(m1);\n\n    for (var i = 0, p, a; i < intersection.points.length; i++) {\n        p = intersection.points[i];\n        a = vx.transform(m3).angleBetween(Vector2D.fromPoints(c, (mp) ? p.transform(mp) : p));\n        if (dth >= 0) {\n            a = (a + 2 * pi2) % pi2;\n            if (a <= dth)\n                np.push(p);\n        } else {\n            a = (a - 2 * pi2) % pi2;\n            if (a >= dth)\n                np.push(p);\n        }\n    }\n    intersection.points = np;\n    return intersection;\n}\n\n/**\n    points1 will be modified, points close (almost identical) to any point in points2 will be removed\n\n    @param {Array<Point2D>} points1 - will be modified, points close to any point in points2 will be removed\n    @param {Array<Point2D>} points2\n*/\nfunction removeClosePoints(points1, points2) {\n    if (points1.length === 0 || points2.length === 0)\n        return;\n    var maxf = function (p, v) { if (p < v.x) p = v.x; if (p < v.y) p = v.y; return p; };\n    var max = points1.reduce(maxf, 0);\n    max = points2.reduce(maxf, max);\n    var ERRF = 1e-15;\n    var ZEROepsilon = 100 * max * ERRF * Math.SQRT2;\n    var j;\n    for (var i = 0; i < points1.length;) {\n        for (j = 0; j < points2.length; j++) {\n            if (points1[i].distanceFrom(points2[j]) <= ZEROepsilon) {\n                points1.splice(i, 1);\n                break;\n            }\n        }\n        if (j == points2.length)\n            i++;\n    }\n}\n\nvar intersectionFunctions = {\n\n    /**\n        intersectPathShape\n\n        @param {IntersectionParams} path\n        @param {IntersectionParams} shape\n        @param {Matrix2D} [m1]\n        @param {Matrix2D} [m2]\n        @returns {Intersection}\n    */\n    intersectPathShape: function (path, shape, m1, m2) {\n        var result = new Intersection();\n        var pathParams = path.params[0];\n        var inter0;\n        var previnter;\n        for (var inter, i = 0; i < pathParams.length; i++) {\n            inter = intersect(pathParams[i], shape, m1, m2);\n            if (!inter0)\n                inter0 = inter;\n            if (previnter) {\n                removeClosePoints(previnter.points, inter.points);\n                result.appendPoints(previnter.points);\n            }\n            previnter = inter;\n        }\n        if (previnter) {\n            result.appendPoints(previnter.points);\n        }\n        return result;\n    },\n\n\n    /**\n        intersectLinesShape\n\n        @param {IntersectionParams} lines - IntersectionParams with points as first parameter (like types RECT, POLYLINE or POLYGON)\n        @param {IntersectionParams} shape - IntersectionParams of other shape\n        @param {Matrix2D} [m1]\n        @param {Matrix2D} [m2]\n        @param {Boolean} [closed] - if set, determines if line between first and last point will be taken into callculation too. If not set, it's true for RECT and POLYGON, false for other <b>lines</b> types.\n        @returns {Intersection}\n    */\n    intersectLinesShape: function (lines, shape, m1, m2, closed) {\n        var IPTYPE = IntersectionParams.TYPE;\n        var line_points = lines.params[0];\n        var ip = new IntersectionParams(IPTYPE.LINE, [0, 0]);\n        var result = new Intersection();\n        var inter, i;\n        var intersectLine = function (i1, i2) {\n            ip.params[0] = line_points[i1];\n            ip.params[1] = line_points[i2];\n            inter = intersect(ip, shape, m1, m2);\n            removeClosePoints(inter.points, [line_points[i2]]);\n            result.appendPoints(inter.points);\n        }\n        for (i = 0; i < line_points.length - 1; i++) {\n            intersectLine(i, i + 1);\n        }\n        if (typeof closed !== 'undefined' && closed || lines.type === IPTYPE.RECT || lines.type === IPTYPE.POLYGON) {\n            intersectLine(line_points.length - 1, 0);\n        }\n        return result;\n    },\n\n    ///////////////////////////////////////////////////////////////////\n    /**\n        intersectArcShape\n\n        @param {IntersectionParams} arc\n        @param {IntersectionParams} shape\n        @param {Matrix2D} [m1]\n        @param {Matrix2D} [m2]\n        @returns {Intersection}\n    */\n    intersectArcShape: function (arc, shape, m1, m2) {\n        m1 = m1 || Matrix2D.IDENTITY;\n        m2 = m2 || Matrix2D.IDENTITY;\n        var c1 = arc.params[0],\n            rx1 = arc.params[1],\n            ry1 = arc.params[2],\n            phi1 = arc.params[3],\n            th1 = arc.params[4],\n            dth1 = arc.params[5];\n\n        var res;\n        if (m1.isIdentity() && phi1 === 0) {\n            res = intersect(IntersectionParams.newEllipse(c1, rx1, ry1), shape, m1, m2);\n        }\n        else {\n            m1 = m1.multiply(Matrix2D.IDENTITY.translate(c1.x, c1.y).rotate(phi1));\n            c1 = new Point2D(0, 0);\n            phi1 = 0;\n            res = intersect(IntersectionParams.newEllipse(c1, rx1, ry1), shape, m1, m2);\n        }\n        res = removePointsNotInArc(res, c1, rx1, ry1, phi1, th1, dth1, m1);\n        return res;\n    },\n\n    /**\n     *  Finds intersection points of two ellipses. <br/>\n     *\n     *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly. His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.geometrictools.com\n     *\n     *  Changes - 2015 Robert Benko (Quazistax)\n     *\n     *  @param {Point2D} c1\n     *  @param {Number} rx1\n     *  @param {Number} ry1\n     *  @param {Point2D} c2\n     *  @param {Number} rx2\n     *  @param {Number} ry2\n     *  @returns {Intersection}\n     */\n    intersectEllipseEllipse: function (c1, rx1, ry1, c2, rx2, ry2) {\n        var a = [\n            ry1 * ry1, 0, rx1 * rx1, -2 * ry1 * ry1 * c1.x, -2 * rx1 * rx1 * c1.y,\n            ry1 * ry1 * c1.x * c1.x + rx1 * rx1 * c1.y * c1.y - rx1 * rx1 * ry1 * ry1\n        ];\n        var b = [\n            ry2 * ry2, 0, rx2 * rx2, -2 * ry2 * ry2 * c2.x, -2 * rx2 * rx2 * c2.y,\n            ry2 * ry2 * c2.x * c2.x + rx2 * rx2 * c2.y * c2.y - rx2 * rx2 * ry2 * ry2\n        ];\n\n        var yPoly = bezout(a, b);\n        var yRoots = yPoly.getRoots();\n        var epsilon = 1e-3;\n        var norm0 = (a[0] * a[0] + 2 * a[1] * a[1] + a[2] * a[2]) * epsilon;\n        var norm1 = (b[0] * b[0] + 2 * b[1] * b[1] + b[2] * b[2]) * epsilon;\n        var result = new Intersection();\n\n        var i;\n        //Handling root calculation error causing not detecting intersection\n        var clip = function (val, min, max) { return Math.max(min, Math.min(max, val)); };\n        for (i = 0 ; i < yRoots.length; i++) {\n            yRoots[i] = clip(yRoots[i], c1.y - ry1, c1.y + ry1);\n            yRoots[i] = clip(yRoots[i], c2.y - ry2, c2.y + ry2);\n        }\n\n        //For detection of multiplicated intersection points\n        yRoots.sort(function (a, b) { return a - b; });\n        var rootPointsN = [];\n\n        for (var y = 0; y < yRoots.length; y++) {\n            var xPoly = new Polynomial(\n                a[0],\n                a[3] + yRoots[y] * a[1],\n                a[5] + yRoots[y] * (a[4] + yRoots[y] * a[2])\n            );\n            var ERRF = 1e-15;\n            if (Math.abs(xPoly.coefs[0]) < 10 * ERRF * Math.abs(xPoly.coefs[2]))\n                xPoly.coefs[0] = 0;\n            var xRoots = xPoly.getRoots();\n\n            rootPointsN.push(0);\n            for (var x = 0; x < xRoots.length; x++) {\n                var test =\n                    (a[0] * xRoots[x] + a[1] * yRoots[y] + a[3]) * xRoots[x] +\n                    (a[2] * yRoots[y] + a[4]) * yRoots[y] + a[5];\n                if (Math.abs(test) < norm0) {\n                    test =\n                        (b[0] * xRoots[x] + b[1] * yRoots[y] + b[3]) * xRoots[x] +\n                        (b[2] * yRoots[y] + b[4]) * yRoots[y] + b[5];\n                    if (Math.abs(test) < norm1) {\n                        result.appendPoint(new Point2D(xRoots[x], yRoots[y]));\n                        rootPointsN[y] += 1;\n                    }\n                }\n            }\n        }\n\n        if (result.points.length <= 0)\n            return result;\n\n        //Removal of multiplicated intersection points\n        var pts = result.points;\n        if (pts.length == 8) {\n            pts = pts.splice(0, 6);\n            pts.splice(2, 2);\n        }\n        else if (pts.length == 7) {\n            pts = pts.splice(0, 6);\n            pts.splice(2, 2);\n            pts.splice(rootPointsN.indexOf(1), 1);\n        }\n        else if (pts.length == 6) {\n            pts.splice(2, 2);\n            //console.log('ElEl 6pts: N: ' + rootPointsN.toString());\n            if (rootPointsN.indexOf(0) > -1) {\n                if (pts[0].distanceFrom(pts[1]) < pts[2].distanceFrom(pts[3])) {\n                    pts.splice(0, 1);\n                }\n                else {\n                    pts.splice(2, 1);\n                }\n            }\n            else if (rootPointsN[0] == rootPointsN[3]) {\n                pts.splice(1, 2);\n            }\n        }\n        else if (pts.length == 4) {\n            if (\n                (yRoots.length == 2)\n            || (yRoots.length == 4 && (rootPointsN[0] == 2 && rootPointsN[1] == 2 || rootPointsN[2] == 2 && rootPointsN[3] == 2))\n            ) {\n                pts.splice(2, 2);\n            }\n        }\n        else if (pts.length == 3 || pts.length == 5) {\n            i = rootPointsN.indexOf(2);\n            if (i > -1) {\n                if (pts.length == 3)\n                    i = i % 2;\n                var ii = i + (i % 2 ? -1 : 2);\n                var d1, d2, d3;\n                d1 = pts[i].distanceFrom(pts[i + 1]);\n                d2 = pts[i].distanceFrom(pts[ii]);\n                d3 = pts[i + 1].distanceFrom(pts[ii]);\n                if (d1 < d2 && d1 < d3) {\n                    pts.splice(i, 1);\n                }\n                else {\n                    pts.splice(ii, 1);\n                }\n            }\n        }\n\n        var ZEROepsilon = yPoly.zeroErrorEstimate();\n        ZEROepsilon *= 100 * Math.SQRT2;\n        for (i = 0; i < pts.length - 1;) {\n            if (pts[i].distanceFrom(pts[i + 1]) < ZEROepsilon) {\n                pts.splice(i + 1, 1);\n                continue;\n            }\n            i++;\n        }\n\n        result.points = pts;\n        return result;\n    },\n\n\n    /**\n     *  intersectEllipseLine\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {Point2D} c\n     *  @param {Number} rx\n     *  @param {Number} ry\n     *  @param {Point2D} a1\n     *  @param {Point2D} a2\n     *  @returns {Intersection}\n     */\n    intersectEllipseLine: function(c, rx, ry, a1, a2) {\n        var result;\n        var origin = new Vector2D(a1.x, a1.y);\n        var dir    = Vector2D.fromPoints(a1, a2);\n        var center = new Vector2D(c.x, c.y);\n        var diff   = origin.subtract(center);\n        var mDir   = new Vector2D( dir.x/(rx*rx),  dir.y/(ry*ry)  );\n        var mDiff  = new Vector2D( diff.x/(rx*rx), diff.y/(ry*ry) );\n\n        var a = dir.dot(mDir);\n        var b = dir.dot(mDiff);\n        c = diff.dot(mDiff) - 1.0;\n        var d = b*b - a*c;\n\n        var ERRF = 1e-15;\n        var ZEROepsilon = 10 * Math.max(Math.abs(a), Math.abs(b), Math.abs(c)) * ERRF;\n        if (Math.abs(d) < ZEROepsilon) {\n            d = 0;\n        }\n\n        if ( d < 0 ) {\n            result = new Intersection(\"Outside\");\n        } else if ( d > 0 ) {\n            var root = Math.sqrt(d);\n            var t_a  = (-b - root) / a;\n            var t_b  = (-b + root) / a;\n\n            t_b = (t_b > 1) ? t_b - ERRF : (t_b < 0) ? t_b + ERRF : t_b;\n            t_a = (t_a > 1) ? t_a - ERRF : (t_a < 0) ? t_a + ERRF : t_a;\n\n            if ( (t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b) ) {\n                if ( (t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1) )\n                    result = new Intersection(\"Outside\");\n                else\n                    result = new Intersection(\"Inside\");\n            } else {\n                result = new Intersection();\n                if ( 0 <= t_a && t_a <= 1 )\n                    result.appendPoint( a1.lerp(a2, t_a) );\n                if ( 0 <= t_b && t_b <= 1 )\n                    result.appendPoint( a1.lerp(a2, t_b) );\n            }\n        } else {\n            var t = -b/a;\n            if ( 0 <= t && t <= 1 ) {\n                result = new Intersection();\n                result.appendPoint( a1.lerp(a2, t) );\n            } else {\n                result = new Intersection(\"Outside\");\n            }\n        }\n\n        return result;\n    },\n\n\n    /**\n     *  intersectLineLine\n     *\n     *  @param {Point2D} a1\n     *  @param {Point2D} a2\n     *  @param {Point2D} b1\n     *  @param {Point2D} b2\n     *  @returns {Intersection}\n     */\n    intersectLineLine: function(a1, a2, b1, b2) {\n        var result;\n        var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if ( u_b !== 0 ) {\n            var ua = ua_t / u_b;\n            var ub = ub_t / u_b;\n\n            if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\n                result = new Intersection();\n                result.points.push(\n                    new Point2D(\n                        a1.x + ua * (a2.x - a1.x),\n                        a1.y + ua * (a2.y - a1.y)\n                    )\n                );\n            } else {\n                result = new Intersection();\n            }\n        } else {\n            if ( ua_t === 0 || ub_t === 0 ) {\n                result = new Intersection(\"Coincident\");\n            } else {\n                result = new Intersection(\"Parallel\");\n            }\n        }\n\n        return result;\n    },\n\n\n    /**\n     *  intersectRayRay\n     *\n     *  @param {Point2D} a1\n     *  @param {Point2D} a2\n     *  @param {Point2D} b1\n     *  @param {Point2D} b2\n     *  @returns {Intersection}\n     */\n    intersectRayRay: function(a1, a2, b1, b2) {\n        var result;\n\n        var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if ( u_b !== 0 ) {\n            var ua = ua_t / u_b;\n\n            result = new Intersection();\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        } else {\n            if ( ua_t === 0 || ub_t === 0 ) {\n                result = new Intersection(\"Coincident\");\n            } else {\n                result = new Intersection(\"Parallel\");\n            }\n        }\n\n        return result;\n    }\n};\n\nvar composedShapeMethods = {};\ncomposedShapeMethods[IPTYPE.PATH] = intersectionFunctions.intersectPathShape;\ncomposedShapeMethods[IPTYPE.POLYLINE] = intersectionFunctions.intersectLinesShape;\ncomposedShapeMethods[IPTYPE.POLYGON] = intersectionFunctions.intersectLinesShape;\ncomposedShapeMethods[IPTYPE.RECT] = intersectionFunctions.intersectLinesShape;\ncomposedShapeMethods[IPTYPE.ROUNDRECT] = intersectionFunctions.intersectPathShape;\ncomposedShapeMethods[IPTYPE.ARC] = intersectionFunctions.intersectArcShape;\n\n\n\nfunction intersect(shape1, shape2, m1, m2) {\n    var ip1 = shape1;\n    var ip2 = shape2;\n    var result;\n\n    if (ip1 !== null && ip2 !== null) {\n        var method;\n        if ((method = composedShapeMethods[ip1.type])) {\n            result = method(ip1, ip2, m1, m2);\n        }\n        else if ((method = composedShapeMethods[ip2.type])) {\n            result = method(ip2, ip1, m2, m1);\n        }\n        else {\n            var params;\n\n            var params1, params2, type1, type2;\n\n            if (ip1.type === IPTYPE.CIRCLE) {\n                params1 = [ip1.params[0], ip1.params[1], ip1.params[1]];\n                type1 = IPTYPE.ELLIPSE;\n            }\n            else {\n                params1 = ip1.params.slice();\n                type1 = ip1.type;\n            }\n\n            if (ip2.type === IPTYPE.CIRCLE) {\n                params2 = [ip2.params[0], ip2.params[1], ip2.params[1]];\n                type2 = IPTYPE.ELLIPSE;\n            }\n            else {\n                params2 = ip2.params.slice();\n                type2 = ip2.type;\n            }\n\n            //var m1 = new Matrix2D(), m2 = new Matrix2D();\n            var SMF = 1;\n            var itm;\n            var useCTM = (m1 instanceof Matrix2D && m2 instanceof Matrix2D);// && (!m1.isIdentity() || !m2.isIdentity()));\n            if (useCTM) {\n                var rx1, ry1, c1;\n                if (type1 === IPTYPE.ELLIPSE && type2 === IPTYPE.ELLIPSE) {\n                    var m1_, m2_;\n                    var d2;\n                    c1 = params1[0];\n                    rx1 = params1[1];\n                    ry1 = params1[2];\n                    var c2 = params2[0], rx2 = params2[1], ry2 = params2[2];\n\n                    m1 = m1.multiply(Matrix2D.IDENTITY.translate(c1.x, c1.y).scaleNonUniform(rx1 / SMF, ry1 / SMF));\n                    c1 = new Point2D(0, 0);\n                    rx1 = ry1 = SMF;\n\n                    m2 = m2.multiply(Matrix2D.IDENTITY.translate(c2.x, c2.y).scaleNonUniform(rx2, ry2));\n                    c2 = new Point2D(0, 0);\n                    rx2 = ry2 = 1;\n\n                    d2 = m1.inverse().multiply(m2).getDecomposition();\n                    m1_ = d2.rotation.inverse().multiply(d2.translation.inverse());\n                    m2_ = d2.scale;\n\n                    rx2 = m2_.a;\n                    ry2 = m2_.d;\n                    c1 = c1.transform(m1_);\n                    itm = m1.multiply(m1_.inverse());\n\n                    params1[0] = c1;\n                    params1[1] = rx1;\n                    params1[2] = ry1;\n                    params2[0] = c2;\n                    params2[1] = rx2;\n                    params2[2] = ry2;\n                }\n                else {\n                    var transParams = function (type, params, m) {\n                        var transParam = function (i) {\n                            params[i] = params[i].transform(m);\n                        }\n\n                        if (type === IPTYPE.LINE) {\n                            transParam(0);\n                            transParam(1);\n                        }\n                        else if (type === IPTYPE.BEZIER2) {\n                            transParam(0);\n                            transParam(1);\n                            transParam(2);\n                        }\n                        else if (type === IPTYPE.BEZIER3) {\n                            transParam(0);\n                            transParam(1);\n                            transParam(2);\n                            transParam(3);\n                        }\n                        else {\n                            throw new Error('Unknown shape: ' + type);\n                        }\n                    }\n\n                    if (type2 === IPTYPE.ELLIPSE) {\n                        var tmp;\n                        tmp = params2; params2 = params1; params1 = tmp;\n                        tmp = type2; type2 = type1; type1 = tmp;\n                        tmp = m2; m2 = m1; m1 = tmp;\n                    }\n\n                    if (type1 === IPTYPE.ELLIPSE) {\n                        c1 = params1[0];\n                        rx1 = params1[1];\n                        ry1 = params1[2];\n\n                        m1 = m1.multiply(Matrix2D.IDENTITY.translate(c1.x, c1.y).scaleNonUniform(rx1 / SMF, ry1 / SMF));\n                        c1 = new Point2D(0, 0);\n                        rx1 = ry1 = SMF;\n\n                        m2_ = m1.inverse().multiply(m2);\n                        transParams(type2, params2, m2_);\n\n                        itm = m1;\n\n                        params1[0] = c1;\n                        params1[1] = rx1;\n                        params1[2] = ry1;\n                    }\n                    else {\n                        transParams(type1, params1, m1);\n                        transParams(type2, params2, m2);\n                        itm = Matrix2D.IDENTITY;\n                    }\n                }\n            }\n\n            if (type1 < type2) {\n                method = \"intersect\" + type1 + type2;\n                params = params1.concat(params2);\n            } else {\n                method = \"intersect\" + type2 + type1;\n                params = params2.concat(params1);\n            }\n\n            result = intersectionFunctions[method].apply(null, params);\n\n            if (useCTM) {\n                for (var i = 0; i < result.points.length; i++) {\n                    result.points[i] = result.points[i].transform(itm);\n                }\n            }\n        }\n    } else {\n        result = new Intersection();\n    }\n\n    return result;\n}\n\nfor(var key in bezierIntersectionFunctions) {\n    if(bezierIntersectionFunctions.hasOwnProperty(key)) {\n        intersectionFunctions[key] = bezierIntersectionFunctions[key];\n    }\n}\n\nexport default intersect;\n","// expose module classes\nimport IntersectionParams from './lib/IntersectionParams';\n\nexport const shape = IntersectionParams.newShape;\n\nexport {default as intersect} from './lib/intersect';\n"],"names":["Point2D","x","y","Object","defineProperties","this","value","writable","enumerable","configurable","prototype","clone","constructor","add","that","subtract","multiply","scalar","divide","equals","lerp","t","omt","distanceFrom","dx","dy","Math","sqrt","min","max","transform","matrix","a","c","e","b","d","f","toString","module","Vector2D","fromPoints","p1","p2","length","magnitude","dot","cross","determinant","unit","angleBetween","cos","radians","acos","perp","perpendicular","project","percent","Matrix2D","undefined","IDENTITY","isIdentity","inverse","det1","idet","det2","det3","translate","tx","ty","scale","scaleAt","center","scaleNonUniform","scaleX","scaleY","scaleNonUniformAt","rotate","s","sin","rotateAt","t1","t2","rotateFromVector","vector","flipX","flipY","skewX","tan","skewY","isInvertible","getScale","getDecomposition","E","F","G","H","Q","R","a1","atan2","a2","theta","phi","translation","rotation","rotation0","join","require$$0","require$$1","require$$2","IntersectionParams","name","params","init","type","meta","TYPE","IPTYPE","parsePointsString","points","split","map","point","LINE","RECT","ROUNDRECT","CIRCLE","ELLIPSE","POLYGON","POLYLINE","PATH","ARC","BEZIER2","BEZIER3","newShape","svgElementName","props","toLowerCase","newLine","x1","y1","x2","y2","rx","ry","newRoundRect","width","height","newRect","newCircle","cx","cy","r","newEllipse","newPolygon","newPolyline","newPath","newArc","startPoint","endPoint","angle","largeArcFlag","sweepFlag","p","arcFlag","radian","ux","uy","vx","vy","mod","rad","PI","factor","halfDiff","x1p","y1p","x1px1p","y1py1p","lambda","rxrx","ryry","rxy1","ryx1","abs","sq","mid","cxp","cyp","xcr1","xcr2","ycr1","ycr2","theta1","deltaTheta","PIx2","getArcParameters","newBezier2","p3","newBezier3","p4","push","degreesToRadians","Token","text","arguments","shape","x0","x3","y0","y3","closePath","typeis","Path","AbsolutePathSegment","command","previous","AbsoluteArcPath","AbsoluteCurveto2","AbsoluteCurveto3","AbsoluteHLineto","AbsoluteVLineto","AbsoluteLineto","AbsoluteMoveto","AbsoluteSmoothCurveto2","AbsoluteSmoothCurveto3","RelativePathSegment","RelativeClosePath","RelativeCurveto2","RelativeCurveto3","RelativeLineto","RelativeMoveto","RelativeSmoothCurveto2","RelativeSmoothCurveto3","COMMAND","NUMBER","EOD","PARAMS","A","C","h","L","l","M","m","q","S","T","V","v","Z","z","tokens","Array","match","substr","RegExp","$1","Error","parseFloat","tokenize","index","token","mode","segments","param_length","i","number","segment","segmentParams","ip","getIntersectionParams","getLastPoint","superclass","pop","call","shift","getLastControlPoint","prevPoint","getControlPoint","lastPoint","diff","getFirstControlPoint","current","cmd","constuctor","Polynomial","TOLERANCE","ACCURACY","interpolate","xs","ys","n","offset","isNaN","ns","dift","ho","hp","w","den","coefs","_variable","_s","eval","result","d1","getDegree","d2","dmax","v1","v2","j","divide_scalar","simplify","bisection","minValue","maxValue","tmp1","log","tmp2","LN10","iters","ceil","LN2","signs","round","sign","trapezoid","range","it","delta","sum","simpson","st","os","ost","romberg","MAX","getDerivative","derivative","getRoots","getLinearRoot","getQuadraticRoots","getCubicRoots","getQuarticRoots","getRootsInInterval","root","roots","droots","results","c3","c2","c1","discrim","halfB","ZEROepsilon","zeroErrorEstimate","tmp","pow","distance","sqrt3","NaN","poly","slice","poly_d","derrt","sort","dery","nr","rb","bounds","maxabsX","minX","maxX","guesses","minmax","df","newton_secant_bisection","concat","an","reduce","nm","bounds_UpperReal_Fujiwara","coefSelectionFunc","find2Max","acc","bi","nearmax","max_nearmax_pos","negX","posX","bounds_LowerReal_Fujiwara","reverse","res","urb","max_iterations","dfx","x_correction","x_new","y_atmin","y_atmax","prev_dfx","prev_x_ef_correction","min_correction_factor","isBounded","isEnoughCorrection","SqrtPolynomial","VERSION","Intersection","status","removeMultipleRootsIn01","splice","appendPoint","appendPoints","bezierIntersectionFunctions","intersectBezier2Bezier2","a3","b1","b2","b3","c12","c11","c10","c22","c21","c20","v0","v3","v4","v5","v6","xRoots","yRoots","checkRoots","xRoot","k","intersectBezier2Bezier3","b4","c23","c10x2","c10y2","c11x2","c11y2","c12x2","c12y2","c20x2","c20y2","c21x2","c21y2","c22x2","c22y2","c23x2","c23y2","intersectBezier2Ellipse","ec","c0","intersectBezier2Line","cl","p5","p6","intersectBezier3Bezier3","a4","c13","c10x3","c10y3","c11x3","c11y3","c12x3","c12y3","c13x2","c13x3","c13y2","c13y3","c20x3","c20y3","c21x3","c22x3","c23x3","c23y3","intersectBezier3Ellipse","intersectBezier3Line","p7","p8","p9","p10","removeClosePoints","points1","points2","maxf","SQRT2","intersectionFunctions","intersectPathShape","path","m1","m2","previnter","inter","pathParams","intersect","intersectLinesShape","lines","closed","line_points","intersectLine","i1","i2","intersectArcShape","arc","rx1","ry1","phi1","th1","dth1","intersection","dth","mp","np","pi2","wasNeg","wasBig","m3","removePointsNotInArc","intersectEllipseEllipse","rx2","ry2","e1","e2","AB","AC","AD","AE","AF","BC","BE","BF","CD","DE","DF","BFpDE","BEmCD","yPoly","norm0","norm1","clip","val","rootPointsN","xPoly","test","pts","indexOf","d3","ii","intersectEllipseLine","origin","dir","mDir","mDiff","t_a","t_b","intersectLineLine","ua_t","ub_t","u_b","ua","ub","intersectRayRay","composedShapeMethods","shape1","shape2","method","ip1","ip2","params1","params2","type1","type2","itm","useCTM","m1_","m2_","transParams","transParam","apply","key","hasOwnProperty"],"mappings":"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"}